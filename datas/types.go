// This file was generated by nomgen.
// To regenerate, run `go generate` in this package.

package datas

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// CommitSet

type CommitSet struct {
	s types.Set
}

type CommitSetIterCallback (func(p Commit) (stop bool))

func NewCommitSet() CommitSet {
	return CommitSet{types.NewSet()}
}

func CommitSetFromVal(p types.Value) CommitSet {
	return CommitSet{p.(types.Set)}
}

func (s CommitSet) NomsValue() types.Set {
	return s.s
}

func (s CommitSet) Equals(p CommitSet) bool {
	return s.s.Equals(p.s)
}

func (s CommitSet) Ref() ref.Ref {
	return s.s.Ref()
}

func (s CommitSet) Empty() bool {
	return s.s.Empty()
}

func (s CommitSet) Len() uint64 {
	return s.s.Len()
}

func (s CommitSet) Has(p Commit) bool {
	return s.s.Has(p.NomsValue())
}

func (s CommitSet) Iter(cb CommitSetIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(CommitFromVal(v))
	})
}

func (s CommitSet) Insert(p ...Commit) CommitSet {
	return CommitSet{s.s.Insert(s.fromElemSlice(p)...)}
}

func (s CommitSet) Remove(p ...Commit) CommitSet {
	return CommitSet{s.s.Remove(s.fromElemSlice(p)...)}
}

func (s CommitSet) Union(others ...CommitSet) CommitSet {
	return CommitSet{s.s.Union(s.fromStructSlice(others)...)}
}

func (s CommitSet) Subtract(others ...CommitSet) CommitSet {
	return CommitSet{s.s.Subtract(s.fromStructSlice(others)...)}
}

func (s CommitSet) Any() Commit {
	return CommitFromVal(s.s.Any())
}

func (s CommitSet) fromStructSlice(p []CommitSet) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s CommitSet) fromElemSlice(p []Commit) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

// Commit

type Commit struct {
	m types.Map
}

func NewCommit() Commit {
	return Commit{types.NewMap()}
}

func CommitFromVal(v types.Value) Commit {
	return Commit{v.(types.Map)}
}

// TODO: This was going to be called Value() but it collides with root.value. We need some other place to put the built-in fields like Value() and Equals().
func (s Commit) NomsValue() types.Map {
	return s.m
}

func (s Commit) Equals(p Commit) bool {
	return s.m.Equals(p.m)
}

func (s Commit) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Commit) Parents() types.Set {
	return types.SetFromVal(s.m.Get(types.NewString("parents")))
}

func (s Commit) SetParents(p types.Set) Commit {
	return CommitFromVal(s.m.Set(types.NewString("parents"), p))
}

func (s Commit) Value() types.Value {
	return (s.m.Get(types.NewString("value")))
}

func (s Commit) SetValue(p types.Value) Commit {
	return CommitFromVal(s.m.Set(types.NewString("value"), p))
}

