// {{.Name}}

type {{.Name}}Def struct {
	{{range .Fields}}{{.Name}} {{defType .T}}
	{{end}}{{if .HasUnion}}__unionIndex uint32
	__unionValue interface{}
{{end}}}

type {{.Name}} struct {
	m types.Map
}

func New{{.Name}}() {{.Name}} {
	return {{.Name}}{types.NewMap(
			types.NewString("$name"), types.NewString("{{.Name}}"),
			{{range .Fields}}types.NewString("{{.Name}}"), {{valueZero .T}},
			{{end}}{{if .HasUnion}}types.NewString("$unionIndex"), types.UInt32(0),
			types.NewString("$unionValue"), {{valueZero .UnionZeroType}},{{end}}
		)}
}

func (def {{.Name}}Def) New() {{.Name}} {
	return {{.Name}}{
		types.NewMap(
			types.NewString("$name"), types.NewString("{{.Name}}"),
			{{range .Fields}}types.NewString("{{.Name}}"), {{defToValue (print "def." .Name) .T}},
			{{end}}{{if .HasUnion}}types.NewString("$unionIndex"), types.UInt32(def.__unionIndex),
			types.NewString("$unionValue"), def.__unionDefToValue(),
		{{end}}
	)}
}

func (self {{.Name}}) Def() {{.Name}}Def {
	return {{.Name}}Def{
		{{range .Fields}}{{valueToDef (printf `self.m.Get(types.NewString("%s"))` .Name) .T}},
		{{end}}{{if .HasUnion}}uint32(self.m.Get(types.NewString("$unionIndex")).(types.UInt32)),
		self.__unionValueToDef(),{{end}}
	}
}

{{if .HasUnion}}
func (def {{.Name}}Def) __unionDefToValue() types.Value {
	switch def.__unionIndex {
	{{range $index, $field := .Choices}}case {{$index}}:
		return {{defToValue (printf "def.__unionValue.(%s)" (defType .T)) .T}}
	{{end}}}
	panic("unreachable")
}

func (self {{.Name}}) __unionValueToDef() interface{} {
	switch uint32(self.m.Get(types.NewString("$unionIndex")).(types.UInt32)) {
	{{range $index, $field := .Choices}}case {{$index}}:
		return {{valueToDef `self.m.Get(types.NewString("$unionValue"))` .T}}
	{{end}}}
	panic("unreachable")
}
{{end}}

func {{.Name}}FromVal(val types.Value) {{.Name}} {
	// TODO: Validate here
	return {{.Name}}{val.(types.Map)}
}

func (self {{.Name}}) NomsValue() types.Value {
	return self.m
}

func (self {{.Name}}) Equals(other {{.Name}}) bool {
	return self.m.Equals(other.m)
}

func (self {{.Name}}) Ref() ref.Ref {
	return self.m.Ref()
}

{{$name := .Name}}
{{range $index, $field := .Fields}}
func (self {{$name}}) {{.Name}}() {{userType .T}} {
	return {{valueToUser (printf `self.m.Get(types.NewString("%s"))` .Name) .T}}
}

func (self {{$name}}) Set{{.Name}}(val {{userType .T}}) {{$name}} {
	return {{$name}}{self.m.Set(types.NewString("{{.Name}}"), {{userToValue "val" .T}})}
}
{{end}}

{{range $index, $field := .Choices}}
func (self {{$name}}) {{.Name}}() (val {{userType .T}}, ok bool) {
	if self.m.Get(types.NewString("$unionIndex")).(types.UInt32) != {{$index}} {
		return
	}
	return {{valueToUser `self.m.Get(types.NewString("$unionValue"))` .T}}, true
}

func (self {{$name}}) Set{{.Name}}(val {{userType .T}}) {{$name}} {
	return {{$name}}{self.m.Set(types.NewString("$unionIndex"), types.UInt32({{$index}})).Set(types.NewString("$unionValue"), {{userToValue "val" .T}})}
}

func (def {{$name}}Def) {{.Name}}() (val {{defType .T}}, ok bool) {
	if def.__unionIndex != {{$index}} {
		return
	}
	return def.__unionValue.({{defType .T}}), true
}

func (def {{$name}}Def) Set{{.Name}}(val {{defType .T}}) {{$name}}Def {
	def.__unionIndex = {{$index}}
	def.__unionValue = val
	return def
}
{{end}}
