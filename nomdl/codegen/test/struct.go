// This file was generated by nomdl/codegen.

package test

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// Struct

type StructDef struct {
	S string
	B bool
}

type Struct struct {
	m types.Map
}

func NewStruct() Struct {
	return Struct{types.NewMap(
		types.NewString("$name"), types.NewString("Struct"),
		types.NewString("S"), types.NewString(""),
		types.NewString("B"), types.Bool(false),
	)}
}

func (def StructDef) New() Struct {
	return Struct{
		types.NewMap(
			types.NewString("$name"), types.NewString("Struct"),
			types.NewString("S"), types.NewString(def.S),
			types.NewString("B"), types.Bool(def.B),
		)}
}

func (self Struct) Def() StructDef {
	return StructDef{
		self.m.Get(types.NewString("S")).(types.String).String(),
		bool(self.m.Get(types.NewString("B")).(types.Bool)),
	}
}

func StructFromVal(val types.Value) Struct {
	// TODO: Validate here
	return Struct{val.(types.Map)}
}

func (self Struct) NomsValue() types.Value {
	return self.m
}

func (self Struct) Equals(other Struct) bool {
	return self.m.Equals(other.m)
}

func (self Struct) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Struct) S() string {
	return self.m.Get(types.NewString("S")).(types.String).String()
}

func (self Struct) SetS(val string) Struct {
	return Struct{self.m.Set(types.NewString("S"), types.NewString(val))}
}

func (self Struct) B() bool {
	return bool(self.m.Get(types.NewString("B")).(types.Bool))
}

func (self Struct) SetB(val bool) Struct {
	return Struct{self.m.Set(types.NewString("B"), types.Bool(val))}
}
