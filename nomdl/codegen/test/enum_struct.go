// This file was generated by nomdl/codegen.

package test

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// EnumStruct

type EnumStruct struct {
	m types.Map
}

func NewEnumStruct() EnumStruct {
	return EnumStruct{types.NewMap(
		types.NewString("$name"), types.NewString("EnumStruct"),
		types.NewString("Hand"), types.Int32(0),
	)}
}

type EnumStructDef struct {
	Hand Handedness
}

func (def EnumStructDef) New() EnumStruct {
	return EnumStruct{
		types.NewMap(
			types.NewString("$name"), types.NewString("EnumStruct"),
			types.NewString("Hand"), types.Int32(def.Hand),
		)}
}

func (self EnumStruct) Def() EnumStructDef {
	return EnumStructDef{
		Handedness(self.m.Get(types.NewString("Hand")).(types.Int32)),
	}
}

func EnumStructFromVal(val types.Value) EnumStruct {
	// TODO: Validate here
	return EnumStruct{val.(types.Map)}
}

func (self EnumStruct) NomsValue() types.Value {
	return self.m
}

func (self EnumStruct) Equals(other EnumStruct) bool {
	return self.m.Equals(other.m)
}

func (self EnumStruct) Ref() ref.Ref {
	return self.m.Ref()
}

func (self EnumStruct) Hand() Handedness {
	return Handedness(self.m.Get(types.NewString("Hand")).(types.Int32))
}

func (self EnumStruct) SetHand(val Handedness) EnumStruct {
	return EnumStruct{self.m.Set(types.NewString("Hand"), types.Int32(val))}
}

// Handedness

type Handedness uint32

const (
	Right Handedness = iota
	Left
	Switch
)
