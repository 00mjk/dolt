// This file was generated by nomdl/codegen.

package test

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// StructWithUnions

type StructWithUnionsDef struct {
	A __unionOfBOfFloat64AndCOfStringDef
	D __unionOfEOfFloat64AndFOfStringDef
}

type StructWithUnions struct {
	l types.List
}

func NewStructWithUnions() StructWithUnions {
	return StructWithUnions{types.NewList(
		New__unionOfBOfFloat64AndCOfString().NomsValue(),
		New__unionOfEOfFloat64AndFOfString().NomsValue(),
	)}
}

func (def StructWithUnionsDef) New() StructWithUnions {
	return StructWithUnions{
		types.NewList(
			def.A.New().NomsValue(),
			def.D.New().NomsValue(),
		)}
}

func (self StructWithUnions) Def() StructWithUnionsDef {
	return StructWithUnionsDef{
		__unionOfBOfFloat64AndCOfStringFromVal(self.l.Get(0)).Def(),
		__unionOfEOfFloat64AndFOfStringFromVal(self.l.Get(1)).Def(),
	}
}

func StructWithUnionsFromVal(val types.Value) StructWithUnions {
	// TODO: Validate here
	return StructWithUnions{val.(types.List)}
}

func (self StructWithUnions) NomsValue() types.Value {
	return self.l
}

func (self StructWithUnions) Equals(p StructWithUnions) bool {
	return self.l.Equals(p.l)
}

func (self StructWithUnions) Ref() ref.Ref {
	return self.l.Ref()
}

func (self StructWithUnions) A() __unionOfBOfFloat64AndCOfString {
	return __unionOfBOfFloat64AndCOfStringFromVal(self.l.Get(0))
}

func (self StructWithUnions) SetA(val __unionOfBOfFloat64AndCOfString) StructWithUnions {
	return StructWithUnions{self.l.Set(0, val.NomsValue())}
}

func (self StructWithUnions) D() __unionOfEOfFloat64AndFOfString {
	return __unionOfEOfFloat64AndFOfStringFromVal(self.l.Get(1))
}

func (self StructWithUnions) SetD(val __unionOfEOfFloat64AndFOfString) StructWithUnions {
	return StructWithUnions{self.l.Set(1, val.NomsValue())}
}

// __unionOfBOfFloat64AndCOfString

type __unionOfBOfFloat64AndCOfStringDef struct {
	__unionIndex uint32
	__unionValue interface{}
}

type __unionOfBOfFloat64AndCOfString struct {
	l types.List
}

func New__unionOfBOfFloat64AndCOfString() __unionOfBOfFloat64AndCOfString {
	return __unionOfBOfFloat64AndCOfString{types.NewList(
		types.UInt32(0),
		types.Float64(0),
	)}
}

func (def __unionOfBOfFloat64AndCOfStringDef) New() __unionOfBOfFloat64AndCOfString {
	return __unionOfBOfFloat64AndCOfString{
		types.NewList(
			types.UInt32(def.__unionIndex),
			def.__unionDefToValue(),
		)}
}

func (self __unionOfBOfFloat64AndCOfString) Def() __unionOfBOfFloat64AndCOfStringDef {
	return __unionOfBOfFloat64AndCOfStringDef{
		uint32(self.l.Get(0).(types.UInt32)),
		self.__unionValueToDef(),
	}
}

func (def __unionOfBOfFloat64AndCOfStringDef) __unionDefToValue() types.Value {
	switch def.__unionIndex {
	case 0:
		return types.Float64(def.__unionValue.(float64))
	case 1:
		return types.NewString(def.__unionValue.(string))
	}
	panic("unreachable")
}

func (self __unionOfBOfFloat64AndCOfString) __unionValueToDef() interface{} {
	switch uint32(self.l.Get(0).(types.UInt32)) {
	case 0:
		return float64(self.l.Get(1).(types.Float64))
	case 1:
		return self.l.Get(1).(types.String).String()
	}
	panic("unreachable")
}

func __unionOfBOfFloat64AndCOfStringFromVal(val types.Value) __unionOfBOfFloat64AndCOfString {
	// TODO: Validate here
	return __unionOfBOfFloat64AndCOfString{val.(types.List)}
}

func (self __unionOfBOfFloat64AndCOfString) NomsValue() types.Value {
	return self.l
}

func (self __unionOfBOfFloat64AndCOfString) Equals(p __unionOfBOfFloat64AndCOfString) bool {
	return self.l.Equals(p.l)
}

func (self __unionOfBOfFloat64AndCOfString) Ref() ref.Ref {
	return self.l.Ref()
}

func (self __unionOfBOfFloat64AndCOfString) B() (val float64, ok bool) {
	if self.l.Get(0).(types.UInt32) != 0 {
		return
	}
	return float64(self.l.Get(1).(types.Float64)), true
}

func (self __unionOfBOfFloat64AndCOfString) SetB(val float64) __unionOfBOfFloat64AndCOfString {
	return __unionOfBOfFloat64AndCOfString{self.l.Set(0, types.UInt32(0)).Set(1, types.Float64(val))}
}

func (def __unionOfBOfFloat64AndCOfStringDef) B() (val float64, ok bool) {
	if def.__unionIndex != 0 {
		return
	}
	return def.__unionValue.(float64), true
}

func (def __unionOfBOfFloat64AndCOfStringDef) SetB(val float64) __unionOfBOfFloat64AndCOfStringDef {
	def.__unionIndex = 0
	def.__unionValue = val
	return def
}

func (self __unionOfBOfFloat64AndCOfString) C() (val string, ok bool) {
	if self.l.Get(0).(types.UInt32) != 1 {
		return
	}
	return self.l.Get(1).(types.String).String(), true
}

func (self __unionOfBOfFloat64AndCOfString) SetC(val string) __unionOfBOfFloat64AndCOfString {
	return __unionOfBOfFloat64AndCOfString{self.l.Set(0, types.UInt32(1)).Set(1, types.NewString(val))}
}

func (def __unionOfBOfFloat64AndCOfStringDef) C() (val string, ok bool) {
	if def.__unionIndex != 1 {
		return
	}
	return def.__unionValue.(string), true
}

func (def __unionOfBOfFloat64AndCOfStringDef) SetC(val string) __unionOfBOfFloat64AndCOfStringDef {
	def.__unionIndex = 1
	def.__unionValue = val
	return def
}

// __unionOfEOfFloat64AndFOfString

type __unionOfEOfFloat64AndFOfStringDef struct {
	__unionIndex uint32
	__unionValue interface{}
}

type __unionOfEOfFloat64AndFOfString struct {
	l types.List
}

func New__unionOfEOfFloat64AndFOfString() __unionOfEOfFloat64AndFOfString {
	return __unionOfEOfFloat64AndFOfString{types.NewList(
		types.UInt32(0),
		types.Float64(0),
	)}
}

func (def __unionOfEOfFloat64AndFOfStringDef) New() __unionOfEOfFloat64AndFOfString {
	return __unionOfEOfFloat64AndFOfString{
		types.NewList(
			types.UInt32(def.__unionIndex),
			def.__unionDefToValue(),
		)}
}

func (self __unionOfEOfFloat64AndFOfString) Def() __unionOfEOfFloat64AndFOfStringDef {
	return __unionOfEOfFloat64AndFOfStringDef{
		uint32(self.l.Get(0).(types.UInt32)),
		self.__unionValueToDef(),
	}
}

func (def __unionOfEOfFloat64AndFOfStringDef) __unionDefToValue() types.Value {
	switch def.__unionIndex {
	case 0:
		return types.Float64(def.__unionValue.(float64))
	case 1:
		return types.NewString(def.__unionValue.(string))
	}
	panic("unreachable")
}

func (self __unionOfEOfFloat64AndFOfString) __unionValueToDef() interface{} {
	switch uint32(self.l.Get(0).(types.UInt32)) {
	case 0:
		return float64(self.l.Get(1).(types.Float64))
	case 1:
		return self.l.Get(1).(types.String).String()
	}
	panic("unreachable")
}

func __unionOfEOfFloat64AndFOfStringFromVal(val types.Value) __unionOfEOfFloat64AndFOfString {
	// TODO: Validate here
	return __unionOfEOfFloat64AndFOfString{val.(types.List)}
}

func (self __unionOfEOfFloat64AndFOfString) NomsValue() types.Value {
	return self.l
}

func (self __unionOfEOfFloat64AndFOfString) Equals(p __unionOfEOfFloat64AndFOfString) bool {
	return self.l.Equals(p.l)
}

func (self __unionOfEOfFloat64AndFOfString) Ref() ref.Ref {
	return self.l.Ref()
}

func (self __unionOfEOfFloat64AndFOfString) E() (val float64, ok bool) {
	if self.l.Get(0).(types.UInt32) != 0 {
		return
	}
	return float64(self.l.Get(1).(types.Float64)), true
}

func (self __unionOfEOfFloat64AndFOfString) SetE(val float64) __unionOfEOfFloat64AndFOfString {
	return __unionOfEOfFloat64AndFOfString{self.l.Set(0, types.UInt32(0)).Set(1, types.Float64(val))}
}

func (def __unionOfEOfFloat64AndFOfStringDef) E() (val float64, ok bool) {
	if def.__unionIndex != 0 {
		return
	}
	return def.__unionValue.(float64), true
}

func (def __unionOfEOfFloat64AndFOfStringDef) SetE(val float64) __unionOfEOfFloat64AndFOfStringDef {
	def.__unionIndex = 0
	def.__unionValue = val
	return def
}

func (self __unionOfEOfFloat64AndFOfString) F() (val string, ok bool) {
	if self.l.Get(0).(types.UInt32) != 1 {
		return
	}
	return self.l.Get(1).(types.String).String(), true
}

func (self __unionOfEOfFloat64AndFOfString) SetF(val string) __unionOfEOfFloat64AndFOfString {
	return __unionOfEOfFloat64AndFOfString{self.l.Set(0, types.UInt32(1)).Set(1, types.NewString(val))}
}

func (def __unionOfEOfFloat64AndFOfStringDef) F() (val string, ok bool) {
	if def.__unionIndex != 1 {
		return
	}
	return def.__unionValue.(string), true
}

func (def __unionOfEOfFloat64AndFOfStringDef) SetF(val string) __unionOfEOfFloat64AndFOfStringDef {
	def.__unionIndex = 1
	def.__unionValue = val
	return def
}
