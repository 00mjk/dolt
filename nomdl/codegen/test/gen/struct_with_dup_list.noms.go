// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __genPackageInFile_struct_with_dup_list_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.TypeRef{
		types.MakeStructTypeRef("StructWithDupList",
			[]types.Field{
				types.Field{"l", types.MakeCompoundTypeRef(types.ListKind, types.MakePrimitiveTypeRef(types.UInt8Kind)), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	__genPackageInFile_struct_with_dup_list_CachedRef = types.RegisterPackage(&p)
}

// StructWithDupList

type StructWithDupList struct {
	m   types.Map
	ref *ref.Ref
}

func NewStructWithDupList() StructWithDupList {
	return StructWithDupList{types.NewMap(
		types.NewString("l"), NewListOfUInt8(),
	), &ref.Ref{}}
}

type StructWithDupListDef struct {
	L ListOfUInt8Def
}

func (def StructWithDupListDef) New() StructWithDupList {
	return StructWithDupList{
		types.NewMap(
			types.NewString("l"), def.L.New(),
		), &ref.Ref{}}
}

func (s StructWithDupList) Def() (d StructWithDupListDef) {
	d.L = s.m.Get(types.NewString("l")).(ListOfUInt8).Def()
	return
}

var __typeRefForStructWithDupList types.TypeRef

func (m StructWithDupList) TypeRef() types.TypeRef {
	return __typeRefForStructWithDupList
}

func init() {
	__typeRefForStructWithDupList = types.MakeTypeRef(__genPackageInFile_struct_with_dup_list_CachedRef, 0)
	types.RegisterFromValFunction(__typeRefForStructWithDupList, func(v types.Value) types.Value {
		return StructWithDupListFromVal(v)
	})
}

func StructWithDupListFromVal(val types.Value) StructWithDupList {
	// TODO: Do we still need FromVal?
	if val, ok := val.(StructWithDupList); ok {
		return val
	}
	// TODO: Validate here
	return StructWithDupList{val.(types.Map), &ref.Ref{}}
}

func (s StructWithDupList) InternalImplementation() types.Map {
	return s.m
}

func (s StructWithDupList) Equals(other types.Value) bool {
	return other != nil && __typeRefForStructWithDupList.Equals(other.TypeRef()) && s.Ref() == other.Ref()
}

func (s StructWithDupList) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s StructWithDupList) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s StructWithDupList) L() ListOfUInt8 {
	return s.m.Get(types.NewString("l")).(ListOfUInt8)
}

func (s StructWithDupList) SetL(val ListOfUInt8) StructWithDupList {
	return StructWithDupList{s.m.Set(types.NewString("l"), val), &ref.Ref{}}
}
