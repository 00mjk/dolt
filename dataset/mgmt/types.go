// This file was generated by nomgen.
// To regenerate, run `go generate` in this package.

package mgmt

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// DatasetSet

type DatasetSet struct {
	s types.Set
}

type DatasetSetIterCallback (func(p Dataset) (stop bool))

func NewDatasetSet() DatasetSet {
	return DatasetSet{types.NewSet()}
}

func DatasetSetFromVal(p types.Value) DatasetSet {
	return DatasetSet{p.(types.Set)}
}

func (s DatasetSet) NomsValue() types.Set {
	return s.s
}

func (s DatasetSet) Equals(p DatasetSet) bool {
	return s.s.Equals(p.s)
}

func (s DatasetSet) Ref() ref.Ref {
	return s.s.Ref()
}

func (s DatasetSet) Empty() bool {
	return s.s.Empty()
}

func (s DatasetSet) Len() uint64 {
	return s.s.Len()
}

func (s DatasetSet) Has(p Dataset) bool {
	return s.s.Has(p.NomsValue())
}

func (s DatasetSet) Iter(cb DatasetSetIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(DatasetFromVal(v))
	})
}

func (s DatasetSet) Insert(p ...Dataset) DatasetSet {
	return DatasetSet{s.s.Insert(s.fromElemSlice(p)...)}
}

func (s DatasetSet) Remove(p ...Dataset) DatasetSet {
	return DatasetSet{s.s.Remove(s.fromElemSlice(p)...)}
}

func (s DatasetSet) Union(others ...DatasetSet) DatasetSet {
	return DatasetSet{s.s.Union(s.fromStructSlice(others)...)}
}

func (s DatasetSet) Subtract(others ...DatasetSet) DatasetSet {
	return DatasetSet{s.s.Subtract(s.fromStructSlice(others)...)}
}

func (s DatasetSet) Any() Dataset {
	return DatasetFromVal(s.s.Any())
}

func (s DatasetSet) fromStructSlice(p []DatasetSet) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s DatasetSet) fromElemSlice(p []Dataset) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

// Dataset

type Dataset struct {
	m types.Map
}

func NewDataset() Dataset {
	return Dataset{types.NewMap()}
}

func DatasetFromVal(v types.Value) Dataset {
	return Dataset{v.(types.Map)}
}

// TODO: This was going to be called Value() but it collides with root.value. We need some other place to put the built-in fields like Value() and Equals().
func (s Dataset) NomsValue() types.Map {
	return s.m
}

func (s Dataset) Equals(p Dataset) bool {
	return s.m.Equals(p.m)
}

func (s Dataset) Ref() ref.Ref {
	return s.m.Ref()
}
func (s Dataset) Id() types.String {
	return s.m.Get(types.NewString("id")).(types.String)
}

func (s Dataset) SetId(p types.String) Dataset {
	return DatasetFromVal(s.m.Set(types.NewString("id"), p))
}
func (s Dataset) Root() types.Value {
	return s.m.Get(types.NewString("root")).(types.Value)
}

func (s Dataset) SetRoot(p types.Value) Dataset {
	return DatasetFromVal(s.m.Set(types.NewString("root"), p))
}
