// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/chunks"
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func __mainPackageInFile_types_Ref() types.Ref {
	p := types.PackageDef{
		Types: types.MapOfStringToTypeRefDef{

			"Geoposition":  __typeRefOfGeoposition(),
			"Georectangle": __typeRefOfGeorectangle(),
			"Node":         __typeRefOfNode(),
			"QuadTree":     __typeRefOfQuadTree(),
		},
	}.New()
	return types.Ref{R: types.RegisterPackage(&p)}
}

// Geoposition

type Geoposition struct {
	m types.Map
}

func NewGeoposition() Geoposition {
	return Geoposition{types.NewMap(
		types.NewString("$name"), types.NewString("Geoposition"),
		types.NewString("$type"), types.MakeTypeRef(types.NewString("Geoposition"), __mainPackageInFile_types_Ref()),
		types.NewString("Latitude"), types.Float32(0),
		types.NewString("Longitude"), types.Float32(0),
	)}
}

type GeopositionDef struct {
	Latitude  float32
	Longitude float32
}

func (def GeopositionDef) New() Geoposition {
	return Geoposition{
		types.NewMap(
			types.NewString("$name"), types.NewString("Geoposition"),
			types.NewString("$type"), types.MakeTypeRef(types.NewString("Geoposition"), __mainPackageInFile_types_Ref()),
			types.NewString("Latitude"), types.Float32(def.Latitude),
			types.NewString("Longitude"), types.Float32(def.Longitude),
		)}
}

func (self Geoposition) Def() GeopositionDef {
	return GeopositionDef{
		float32(self.m.Get(types.NewString("Latitude")).(types.Float32)),
		float32(self.m.Get(types.NewString("Longitude")).(types.Float32)),
	}
}

// Creates and returns a Noms Value that describes Geoposition.
func __typeRefOfGeoposition() types.TypeRef {
	return types.MakeStructTypeRef(types.NewString("Geoposition"),
		types.NewList(
			types.NewString("Latitude"), types.MakePrimitiveTypeRef(types.Float32Kind),
			types.NewString("Longitude"), types.MakePrimitiveTypeRef(types.Float32Kind),
		),
		nil)

}

func GeopositionFromVal(val types.Value) Geoposition {
	// TODO: Validate here
	return Geoposition{val.(types.Map)}
}

func (self Geoposition) NomsValue() types.Value {
	return self.m
}

func (self Geoposition) Equals(other Geoposition) bool {
	return self.m.Equals(other.m)
}

func (self Geoposition) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Geoposition) Type() types.TypeRef {
	return self.m.Get(types.NewString("$type")).(types.TypeRef)
}

func (self Geoposition) Latitude() float32 {
	return float32(self.m.Get(types.NewString("Latitude")).(types.Float32))
}

func (self Geoposition) SetLatitude(val float32) Geoposition {
	return Geoposition{self.m.Set(types.NewString("Latitude"), types.Float32(val))}
}

func (self Geoposition) Longitude() float32 {
	return float32(self.m.Get(types.NewString("Longitude")).(types.Float32))
}

func (self Geoposition) SetLongitude(val float32) Geoposition {
	return Geoposition{self.m.Set(types.NewString("Longitude"), types.Float32(val))}
}

// Georectangle

type Georectangle struct {
	m types.Map
}

func NewGeorectangle() Georectangle {
	return Georectangle{types.NewMap(
		types.NewString("$name"), types.NewString("Georectangle"),
		types.NewString("$type"), types.MakeTypeRef(types.NewString("Georectangle"), __mainPackageInFile_types_Ref()),
		types.NewString("TopLeft"), NewGeoposition().NomsValue(),
		types.NewString("BottomRight"), NewGeoposition().NomsValue(),
	)}
}

type GeorectangleDef struct {
	TopLeft     GeopositionDef
	BottomRight GeopositionDef
}

func (def GeorectangleDef) New() Georectangle {
	return Georectangle{
		types.NewMap(
			types.NewString("$name"), types.NewString("Georectangle"),
			types.NewString("$type"), types.MakeTypeRef(types.NewString("Georectangle"), __mainPackageInFile_types_Ref()),
			types.NewString("TopLeft"), def.TopLeft.New().NomsValue(),
			types.NewString("BottomRight"), def.BottomRight.New().NomsValue(),
		)}
}

func (self Georectangle) Def() GeorectangleDef {
	return GeorectangleDef{
		GeopositionFromVal(self.m.Get(types.NewString("TopLeft"))).Def(),
		GeopositionFromVal(self.m.Get(types.NewString("BottomRight"))).Def(),
	}
}

// Creates and returns a Noms Value that describes Georectangle.
func __typeRefOfGeorectangle() types.TypeRef {
	return types.MakeStructTypeRef(types.NewString("Georectangle"),
		types.NewList(
			types.NewString("TopLeft"), types.MakeTypeRef(types.NewString("Geoposition"), types.Ref{}),
			types.NewString("BottomRight"), types.MakeTypeRef(types.NewString("Geoposition"), types.Ref{}),
		),
		nil)

}

func GeorectangleFromVal(val types.Value) Georectangle {
	// TODO: Validate here
	return Georectangle{val.(types.Map)}
}

func (self Georectangle) NomsValue() types.Value {
	return self.m
}

func (self Georectangle) Equals(other Georectangle) bool {
	return self.m.Equals(other.m)
}

func (self Georectangle) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Georectangle) Type() types.TypeRef {
	return self.m.Get(types.NewString("$type")).(types.TypeRef)
}

func (self Georectangle) TopLeft() Geoposition {
	return GeopositionFromVal(self.m.Get(types.NewString("TopLeft")))
}

func (self Georectangle) SetTopLeft(val Geoposition) Georectangle {
	return Georectangle{self.m.Set(types.NewString("TopLeft"), val.NomsValue())}
}

func (self Georectangle) BottomRight() Geoposition {
	return GeopositionFromVal(self.m.Get(types.NewString("BottomRight")))
}

func (self Georectangle) SetBottomRight(val Geoposition) Georectangle {
	return Georectangle{self.m.Set(types.NewString("BottomRight"), val.NomsValue())}
}

// Node

type Node struct {
	m types.Map
}

func NewNode() Node {
	return Node{types.NewMap(
		types.NewString("$name"), types.NewString("Node"),
		types.NewString("$type"), types.MakeTypeRef(types.NewString("Node"), __mainPackageInFile_types_Ref()),
		types.NewString("Geoposition"), NewGeoposition().NomsValue(),
		types.NewString("Reference"), types.Ref{R: ref.Ref{}},
	)}
}

type NodeDef struct {
	Geoposition GeopositionDef
	Reference   ref.Ref
}

func (def NodeDef) New() Node {
	return Node{
		types.NewMap(
			types.NewString("$name"), types.NewString("Node"),
			types.NewString("$type"), types.MakeTypeRef(types.NewString("Node"), __mainPackageInFile_types_Ref()),
			types.NewString("Geoposition"), def.Geoposition.New().NomsValue(),
			types.NewString("Reference"), types.Ref{R: def.Reference},
		)}
}

func (self Node) Def() NodeDef {
	return NodeDef{
		GeopositionFromVal(self.m.Get(types.NewString("Geoposition"))).Def(),
		self.m.Get(types.NewString("Reference")).Ref(),
	}
}

// Creates and returns a Noms Value that describes Node.
func __typeRefOfNode() types.TypeRef {
	return types.MakeStructTypeRef(types.NewString("Node"),
		types.NewList(
			types.NewString("Geoposition"), types.MakeTypeRef(types.NewString("Geoposition"), types.Ref{}),
			types.NewString("Reference"), types.MakeCompoundTypeRef(types.NewString(""), types.RefKind, types.MakePrimitiveTypeRef(types.ValueKind)),
		),
		nil)

}

func NodeFromVal(val types.Value) Node {
	// TODO: Validate here
	return Node{val.(types.Map)}
}

func (self Node) NomsValue() types.Value {
	return self.m
}

func (self Node) Equals(other Node) bool {
	return self.m.Equals(other.m)
}

func (self Node) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Node) Type() types.TypeRef {
	return self.m.Get(types.NewString("$type")).(types.TypeRef)
}

func (self Node) Geoposition() Geoposition {
	return GeopositionFromVal(self.m.Get(types.NewString("Geoposition")))
}

func (self Node) SetGeoposition(val Geoposition) Node {
	return Node{self.m.Set(types.NewString("Geoposition"), val.NomsValue())}
}

func (self Node) Reference() RefOfValue {
	return RefOfValueFromVal(self.m.Get(types.NewString("Reference")))
}

func (self Node) SetReference(val RefOfValue) Node {
	return Node{self.m.Set(types.NewString("Reference"), val.NomsValue())}
}

// RefOfValue

type RefOfValue struct {
	r ref.Ref
}

func NewRefOfValue(r ref.Ref) RefOfValue {
	return RefOfValue{r}
}

func (r RefOfValue) Ref() ref.Ref {
	return r.r
}

func (r RefOfValue) Equals(other RefOfValue) bool {
	return r.Ref() == other.Ref()
}

func (r RefOfValue) NomsValue() types.Value {
	return types.Ref{R: r.r}
}

func RefOfValueFromVal(p types.Value) RefOfValue {
	return RefOfValue{p.(types.Ref).Ref()}
}

func (r RefOfValue) GetValue(cs chunks.ChunkSource) types.Value {
	return types.ReadValue(r.r, cs)
}

func (r RefOfValue) SetValue(val types.Value, cs chunks.ChunkSink) RefOfValue {
	ref := types.WriteValue(val, cs)
	return RefOfValue{ref}
}

// QuadTree

type QuadTree struct {
	m types.Map
}

func NewQuadTree() QuadTree {
	return QuadTree{types.NewMap(
		types.NewString("$name"), types.NewString("QuadTree"),
		types.NewString("$type"), types.MakeTypeRef(types.NewString("QuadTree"), __mainPackageInFile_types_Ref()),
		types.NewString("Nodes"), types.NewList(),
		types.NewString("Tiles"), types.NewMap(),
		types.NewString("Depth"), types.UInt8(0),
		types.NewString("NumDescendents"), types.UInt32(0),
		types.NewString("Path"), types.NewString(""),
		types.NewString("Georectangle"), NewGeorectangle().NomsValue(),
	)}
}

type QuadTreeDef struct {
	Nodes          ListOfNodeDef
	Tiles          MapOfStringToQuadTreeDef
	Depth          uint8
	NumDescendents uint32
	Path           string
	Georectangle   GeorectangleDef
}

func (def QuadTreeDef) New() QuadTree {
	return QuadTree{
		types.NewMap(
			types.NewString("$name"), types.NewString("QuadTree"),
			types.NewString("$type"), types.MakeTypeRef(types.NewString("QuadTree"), __mainPackageInFile_types_Ref()),
			types.NewString("Nodes"), def.Nodes.New().NomsValue(),
			types.NewString("Tiles"), def.Tiles.New().NomsValue(),
			types.NewString("Depth"), types.UInt8(def.Depth),
			types.NewString("NumDescendents"), types.UInt32(def.NumDescendents),
			types.NewString("Path"), types.NewString(def.Path),
			types.NewString("Georectangle"), def.Georectangle.New().NomsValue(),
		)}
}

func (self QuadTree) Def() QuadTreeDef {
	return QuadTreeDef{
		ListOfNodeFromVal(self.m.Get(types.NewString("Nodes"))).Def(),
		MapOfStringToQuadTreeFromVal(self.m.Get(types.NewString("Tiles"))).Def(),
		uint8(self.m.Get(types.NewString("Depth")).(types.UInt8)),
		uint32(self.m.Get(types.NewString("NumDescendents")).(types.UInt32)),
		self.m.Get(types.NewString("Path")).(types.String).String(),
		GeorectangleFromVal(self.m.Get(types.NewString("Georectangle"))).Def(),
	}
}

// Creates and returns a Noms Value that describes QuadTree.
func __typeRefOfQuadTree() types.TypeRef {
	return types.MakeStructTypeRef(types.NewString("QuadTree"),
		types.NewList(
			types.NewString("Nodes"), types.MakeCompoundTypeRef(types.NewString(""), types.ListKind, types.MakeTypeRef(types.NewString("Node"), types.Ref{})),
			types.NewString("Tiles"), types.MakeCompoundTypeRef(types.NewString(""), types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeTypeRef(types.NewString("QuadTree"), types.Ref{})),
			types.NewString("Depth"), types.MakePrimitiveTypeRef(types.UInt8Kind),
			types.NewString("NumDescendents"), types.MakePrimitiveTypeRef(types.UInt32Kind),
			types.NewString("Path"), types.MakePrimitiveTypeRef(types.StringKind),
			types.NewString("Georectangle"), types.MakeTypeRef(types.NewString("Georectangle"), types.Ref{}),
		),
		nil)

}

func QuadTreeFromVal(val types.Value) QuadTree {
	// TODO: Validate here
	return QuadTree{val.(types.Map)}
}

func (self QuadTree) NomsValue() types.Value {
	return self.m
}

func (self QuadTree) Equals(other QuadTree) bool {
	return self.m.Equals(other.m)
}

func (self QuadTree) Ref() ref.Ref {
	return self.m.Ref()
}

func (self QuadTree) Type() types.TypeRef {
	return self.m.Get(types.NewString("$type")).(types.TypeRef)
}

func (self QuadTree) Nodes() ListOfNode {
	return ListOfNodeFromVal(self.m.Get(types.NewString("Nodes")))
}

func (self QuadTree) SetNodes(val ListOfNode) QuadTree {
	return QuadTree{self.m.Set(types.NewString("Nodes"), val.NomsValue())}
}

func (self QuadTree) Tiles() MapOfStringToQuadTree {
	return MapOfStringToQuadTreeFromVal(self.m.Get(types.NewString("Tiles")))
}

func (self QuadTree) SetTiles(val MapOfStringToQuadTree) QuadTree {
	return QuadTree{self.m.Set(types.NewString("Tiles"), val.NomsValue())}
}

func (self QuadTree) Depth() uint8 {
	return uint8(self.m.Get(types.NewString("Depth")).(types.UInt8))
}

func (self QuadTree) SetDepth(val uint8) QuadTree {
	return QuadTree{self.m.Set(types.NewString("Depth"), types.UInt8(val))}
}

func (self QuadTree) NumDescendents() uint32 {
	return uint32(self.m.Get(types.NewString("NumDescendents")).(types.UInt32))
}

func (self QuadTree) SetNumDescendents(val uint32) QuadTree {
	return QuadTree{self.m.Set(types.NewString("NumDescendents"), types.UInt32(val))}
}

func (self QuadTree) Path() string {
	return self.m.Get(types.NewString("Path")).(types.String).String()
}

func (self QuadTree) SetPath(val string) QuadTree {
	return QuadTree{self.m.Set(types.NewString("Path"), types.NewString(val))}
}

func (self QuadTree) Georectangle() Georectangle {
	return GeorectangleFromVal(self.m.Get(types.NewString("Georectangle")))
}

func (self QuadTree) SetGeorectangle(val Georectangle) QuadTree {
	return QuadTree{self.m.Set(types.NewString("Georectangle"), val.NomsValue())}
}

// ListOfNode

type ListOfNode struct {
	l types.List
}

func NewListOfNode() ListOfNode {
	return ListOfNode{types.NewList()}
}

type ListOfNodeDef []NodeDef

func (def ListOfNodeDef) New() ListOfNode {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New().NomsValue()
	}
	return ListOfNode{types.NewList(l...)}
}

func (self ListOfNode) Def() ListOfNodeDef {
	l := make([]NodeDef, self.Len())
	for i := uint64(0); i < self.Len(); i++ {
		l[i] = NodeFromVal(self.l.Get(i)).Def()
	}
	return l
}

func ListOfNodeFromVal(val types.Value) ListOfNode {
	// TODO: Validate here
	return ListOfNode{val.(types.List)}
}

func (self ListOfNode) NomsValue() types.Value {
	return self.l
}

func (l ListOfNode) Equals(p ListOfNode) bool {
	return l.l.Equals(p.l)
}

func (l ListOfNode) Ref() ref.Ref {
	return l.l.Ref()
}

func (l ListOfNode) Len() uint64 {
	return l.l.Len()
}

func (l ListOfNode) Empty() bool {
	return l.Len() == uint64(0)
}

func (self ListOfNode) Get(i uint64) Node {
	return NodeFromVal(self.l.Get(i))
}

func (l ListOfNode) Slice(idx uint64, end uint64) ListOfNode {
	return ListOfNode{l.l.Slice(idx, end)}
}

func (self ListOfNode) Set(i uint64, val Node) ListOfNode {
	return ListOfNode{self.l.Set(i, val.NomsValue())}
}

func (l ListOfNode) Append(v ...Node) ListOfNode {
	return ListOfNode{l.l.Append(l.fromElemSlice(v)...)}
}

func (l ListOfNode) Insert(idx uint64, v ...Node) ListOfNode {
	return ListOfNode{l.l.Insert(idx, l.fromElemSlice(v)...)}
}

func (l ListOfNode) Remove(idx uint64, end uint64) ListOfNode {
	return ListOfNode{l.l.Remove(idx, end)}
}

func (l ListOfNode) RemoveAt(idx uint64) ListOfNode {
	return ListOfNode{(l.l.RemoveAt(idx))}
}

func (l ListOfNode) fromElemSlice(p []Node) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

type ListOfNodeIterCallback func(v Node) (stop bool)

func (l ListOfNode) Iter(cb ListOfNodeIterCallback) {
	l.l.Iter(func(v types.Value) bool {
		return cb(NodeFromVal(v))
	})
}

type ListOfNodeIterAllCallback func(v Node)

func (l ListOfNode) IterAll(cb ListOfNodeIterAllCallback) {
	l.l.IterAll(func(v types.Value) {
		cb(NodeFromVal(v))
	})
}

type ListOfNodeFilterCallback func(v Node) (keep bool)

func (l ListOfNode) Filter(cb ListOfNodeFilterCallback) ListOfNode {
	nl := NewListOfNode()
	l.IterAll(func(v Node) {
		if cb(v) {
			nl = nl.Append(v)
		}
	})
	return nl
}

// MapOfStringToQuadTree

type MapOfStringToQuadTree struct {
	m types.Map
}

func NewMapOfStringToQuadTree() MapOfStringToQuadTree {
	return MapOfStringToQuadTree{types.NewMap()}
}

type MapOfStringToQuadTreeDef map[string]QuadTreeDef

func (def MapOfStringToQuadTreeDef) New() MapOfStringToQuadTree {
	kv := make([]types.Value, 0, len(def)*2)
	for k, v := range def {
		kv = append(kv, types.NewString(k), v.New().NomsValue())
	}
	return MapOfStringToQuadTree{types.NewMap(kv...)}
}

func (self MapOfStringToQuadTree) Def() MapOfStringToQuadTreeDef {
	def := make(map[string]QuadTreeDef)
	self.m.Iter(func(k, v types.Value) bool {
		def[k.(types.String).String()] = QuadTreeFromVal(v).Def()
		return false
	})
	return def
}

func MapOfStringToQuadTreeFromVal(p types.Value) MapOfStringToQuadTree {
	// TODO: Validate here
	return MapOfStringToQuadTree{p.(types.Map)}
}

func (m MapOfStringToQuadTree) NomsValue() types.Value {
	return m.m
}

func (m MapOfStringToQuadTree) Equals(p MapOfStringToQuadTree) bool {
	return m.m.Equals(p.m)
}

func (m MapOfStringToQuadTree) Ref() ref.Ref {
	return m.m.Ref()
}

func (m MapOfStringToQuadTree) Empty() bool {
	return m.m.Empty()
}

func (m MapOfStringToQuadTree) Len() uint64 {
	return m.m.Len()
}

func (m MapOfStringToQuadTree) Has(p string) bool {
	return m.m.Has(types.NewString(p))
}

func (m MapOfStringToQuadTree) Get(p string) QuadTree {
	return QuadTreeFromVal(m.m.Get(types.NewString(p)))
}

func (m MapOfStringToQuadTree) Set(k string, v QuadTree) MapOfStringToQuadTree {
	return MapOfStringToQuadTree{m.m.Set(types.NewString(k), v.NomsValue())}
}

// TODO: Implement SetM?

func (m MapOfStringToQuadTree) Remove(p string) MapOfStringToQuadTree {
	return MapOfStringToQuadTree{m.m.Remove(types.NewString(p))}
}

type MapOfStringToQuadTreeIterCallback func(k string, v QuadTree) (stop bool)

func (m MapOfStringToQuadTree) Iter(cb MapOfStringToQuadTreeIterCallback) {
	m.m.Iter(func(k, v types.Value) bool {
		return cb(k.(types.String).String(), QuadTreeFromVal(v))
	})
}

type MapOfStringToQuadTreeIterAllCallback func(k string, v QuadTree)

func (m MapOfStringToQuadTree) IterAll(cb MapOfStringToQuadTreeIterAllCallback) {
	m.m.IterAll(func(k, v types.Value) {
		cb(k.(types.String).String(), QuadTreeFromVal(v))
	})
}

type MapOfStringToQuadTreeFilterCallback func(k string, v QuadTree) (keep bool)

func (m MapOfStringToQuadTree) Filter(cb MapOfStringToQuadTreeFilterCallback) MapOfStringToQuadTree {
	nm := NewMapOfStringToQuadTree()
	m.IterAll(func(k string, v QuadTree) {
		if cb(k, v) {
			nm = nm.Set(k, v)
		}
	})
	return nm
}
