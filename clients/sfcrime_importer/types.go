// This file was generated by nomgen.
// To regenerate, run `go generate` in this package.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// ListOfIncident

type ListOfIncident struct {
	l types.List
}

type ListOfIncidentIterCallback (func (p Incident) (stop bool))

func NewListOfIncident() ListOfIncident {
	return ListOfIncident{types.NewList()}
}

func ListOfIncidentFromVal(p types.Value) ListOfIncident {
	return ListOfIncident{p.(types.List)}
}

func (l ListOfIncident) NomsValue() types.List {
	return l.l
}

func (l ListOfIncident) Equals(p ListOfIncident) bool {
	return l.l.Equals(p.l)
}

func (l ListOfIncident) Ref() ref.Ref {
	return l.l.Ref()
}

func (l ListOfIncident) Len() uint64 {
	return l.l.Len()
}

func (l ListOfIncident) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfIncident) Get(idx uint64) Incident {
	return IncidentFromVal(l.l.Get(idx))
}

func (l ListOfIncident) Slice(idx uint64, end uint64) ListOfIncident {
	return ListOfIncident{l.l.Slice(idx, end)}
}

func (l ListOfIncident) Set(idx uint64, v Incident) ListOfIncident {
	return ListOfIncident{l.l.Set(idx, v.NomsValue())}
}

func (l ListOfIncident) Append(v ...Incident) ListOfIncident {
	return ListOfIncident{l.l.Append(l.fromElemSlice(v)...)}
}

func (l ListOfIncident) Insert(idx uint64, v ...Incident) ListOfIncident {
	return ListOfIncident{l.l.Insert(idx, l.fromElemSlice(v)...)}
}

func (l ListOfIncident) Remove(idx uint64, end uint64) ListOfIncident {
	return ListOfIncident{l.l.Remove(idx, end)}
}

func (l ListOfIncident) RemoveAt(idx uint64) ListOfIncident {
	return ListOfIncident{(l.l.RemoveAt(idx))}
}

func (l ListOfIncident) fromElemSlice(p []Incident) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

// Incident

type Incident struct {
	m types.Map
}

func NewIncident() Incident {
	return Incident{
		types.NewMap(types.NewString("$name"), types.NewString("Incident")),
	}
}

func IncidentFromVal(v types.Value) Incident {
	return Incident{v.(types.Map)}
}

// TODO: This was going to be called Value() but it collides with root.value. We need some other place to put the built-in fields like Value() and Equals().
func (s Incident) NomsValue() types.Map {
	return s.m
}

func (s Incident) Equals(p Incident) bool {
	return s.m.Equals(p.m)
}

func (s Incident) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Incident) PdID() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("PdID")))
}

func (s Incident) SetPdID(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("PdID"), p))
}

func (s Incident) Resolution() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Resolution")))
}

func (s Incident) SetResolution(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Resolution"), p))
}

func (s Incident) Time() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Time")))
}

func (s Incident) SetTime(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Time"), p))
}

func (s Incident) Category() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Category")))
}

func (s Incident) SetCategory(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Category"), p))
}

func (s Incident) PdDistrict() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("PdDistrict")))
}

func (s Incident) SetPdDistrict(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("PdDistrict"), p))
}

func (s Incident) Geoposition() Geoposition {
	return GeopositionFromVal(s.m.Get(types.NewString("geoposition")))
}

func (s Incident) SetGeoposition(p Geoposition) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("geoposition"), p.NomsValue()))
}

func (s Incident) Date() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Date")))
}

func (s Incident) SetDate(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Date"), p))
}

func (s Incident) ID() types.Int64 {
	return types.Int64FromVal(s.m.Get(types.NewString("ID")))
}

func (s Incident) SetID(p types.Int64) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("ID"), p))
}

func (s Incident) Description() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Description")))
}

func (s Incident) SetDescription(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Description"), p))
}

func (s Incident) Address() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("Address")))
}

func (s Incident) SetAddress(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("Address"), p))
}

func (s Incident) DayOfWeek() types.String {
	return types.StringFromVal(s.m.Get(types.NewString("DayOfWeek")))
}

func (s Incident) SetDayOfWeek(p types.String) Incident {
	return IncidentFromVal(s.m.Set(types.NewString("DayOfWeek"), p))
}

// Geoposition

type Geoposition struct {
	m types.Map
}

func NewGeoposition() Geoposition {
	return Geoposition{
		types.NewMap(types.NewString("$name"), types.NewString("Geoposition")),
	}
}

func GeopositionFromVal(v types.Value) Geoposition {
	return Geoposition{v.(types.Map)}
}

// TODO: This was going to be called Value() but it collides with root.value. We need some other place to put the built-in fields like Value() and Equals().
func (s Geoposition) NomsValue() types.Map {
	return s.m
}

func (s Geoposition) Equals(p Geoposition) bool {
	return s.m.Equals(p.m)
}

func (s Geoposition) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Geoposition) Longitude() types.Float32 {
	return types.Float32FromVal(s.m.Get(types.NewString("longitude")))
}

func (s Geoposition) SetLongitude(p types.Float32) Geoposition {
	return GeopositionFromVal(s.m.Set(types.NewString("longitude"), p))
}

func (s Geoposition) Latitude() types.Float32 {
	return types.Float32FromVal(s.m.Get(types.NewString("latitude")))
}

func (s Geoposition) SetLatitude(p types.Float32) Geoposition {
	return GeopositionFromVal(s.m.Set(types.NewString("latitude"), p))
}

