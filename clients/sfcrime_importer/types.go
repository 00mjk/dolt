// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// ListOfIncident

type ListOfIncident struct {
	l types.List
}

type ListOfIncidentDef []IncidentDef

func NewListOfIncident() ListOfIncident {
	return ListOfIncident{types.NewList()}
}

func (def ListOfIncidentDef) New() ListOfIncident {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New().NomsValue()
	}
	return ListOfIncident{types.NewList(l...)}
}

func ListOfIncidentFromVal(val types.Value) ListOfIncident {
	// TODO: Validate here
	return ListOfIncident{val.(types.List)}
}

func (self ListOfIncident) Def() ListOfIncidentDef {
	l := make([]IncidentDef, self.Len())
	for i := uint64(0); i < self.Len(); i++ {
		l[i] = IncidentFromVal(self.l.Get(i)).Def()
	}
	return l
}

func (self ListOfIncident) NomsValue() types.Value {
	return self.l
}

func (l ListOfIncident) Equals(p ListOfIncident) bool {
	return l.l.Equals(p.l)
}

func (l ListOfIncident) Ref() ref.Ref {
	return l.l.Ref()
}

func (l ListOfIncident) Len() uint64 {
	return l.l.Len()
}

func (l ListOfIncident) Empty() bool {
	return l.Len() == uint64(0)
}

func (self ListOfIncident) Get(i uint64) Incident {
	return IncidentFromVal(self.l.Get(i))
}

func (l ListOfIncident) Slice(idx uint64, end uint64) ListOfIncident {
	return ListOfIncident{l.l.Slice(idx, end)}
}

func (self ListOfIncident) Set(i uint64, val Incident) ListOfIncident {
	return ListOfIncident{self.l.Set(i, val.NomsValue())}
}

func (l ListOfIncident) Append(v ...Incident) ListOfIncident {
	return ListOfIncident{l.l.Append(l.fromElemSlice(v)...)}
}

func (l ListOfIncident) Insert(idx uint64, v ...Incident) ListOfIncident {
	return ListOfIncident{l.l.Insert(idx, l.fromElemSlice(v)...)}
}

func (l ListOfIncident) Remove(idx uint64, end uint64) ListOfIncident {
	return ListOfIncident{l.l.Remove(idx, end)}
}

func (l ListOfIncident) RemoveAt(idx uint64) ListOfIncident {
	return ListOfIncident{(l.l.RemoveAt(idx))}
}

func (l ListOfIncident) fromElemSlice(p []Incident) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

type ListOfIncidentIterCallback func(v Incident) (stop bool)

func (l ListOfIncident) Iter(cb ListOfIncidentIterCallback) {
	l.l.Iter(func(v types.Value) bool {
		return cb(IncidentFromVal(v))
	})
}

type ListOfIncidentIterAllCallback func(v Incident)

func (l ListOfIncident) IterAll(cb ListOfIncidentIterAllCallback) {
	l.l.IterAll(func(v types.Value) {
		cb(IncidentFromVal(v))
	})
}

type ListOfIncidentFilterCallback func(v Incident) (keep bool)

func (l ListOfIncident) Filter(cb ListOfIncidentFilterCallback) ListOfIncident {
	nl := NewListOfIncident()
	l.IterAll(func(v Incident) {
		if cb(v) {
			nl = nl.Append(v)
		}
	})
	return nl
}

// Incident

type IncidentDef struct {
	ID          int64
	Category    string
	Description string
	DayOfWeek   string
	Date        string
	Time        string
	PdDistrict  string
	Resolution  string
	Address     string
	Geoposition GeopositionDef
	PdID        string
}

type Incident struct {
	m types.Map
}

func NewIncident() Incident {
	return Incident{types.NewMap(
		types.NewString("$name"), types.NewString("Incident"),
		types.NewString("ID"), types.Int64(0),
		types.NewString("Category"), types.NewString(""),
		types.NewString("Description"), types.NewString(""),
		types.NewString("DayOfWeek"), types.NewString(""),
		types.NewString("Date"), types.NewString(""),
		types.NewString("Time"), types.NewString(""),
		types.NewString("PdDistrict"), types.NewString(""),
		types.NewString("Resolution"), types.NewString(""),
		types.NewString("Address"), types.NewString(""),
		types.NewString("Geoposition"), NewGeoposition().NomsValue(),
		types.NewString("PdID"), types.NewString(""),
	)}
}

func (def IncidentDef) New() Incident {
	return Incident{
		types.NewMap(
			types.NewString("$name"), types.NewString("Incident"),
			types.NewString("ID"), types.Int64(def.ID),
			types.NewString("Category"), types.NewString(def.Category),
			types.NewString("Description"), types.NewString(def.Description),
			types.NewString("DayOfWeek"), types.NewString(def.DayOfWeek),
			types.NewString("Date"), types.NewString(def.Date),
			types.NewString("Time"), types.NewString(def.Time),
			types.NewString("PdDistrict"), types.NewString(def.PdDistrict),
			types.NewString("Resolution"), types.NewString(def.Resolution),
			types.NewString("Address"), types.NewString(def.Address),
			types.NewString("Geoposition"), def.Geoposition.New().NomsValue(),
			types.NewString("PdID"), types.NewString(def.PdID),
		)}
}

func (self Incident) Def() IncidentDef {
	return IncidentDef{
		int64(self.m.Get(types.NewString("ID")).(types.Int64)),
		self.m.Get(types.NewString("Category")).(types.String).String(),
		self.m.Get(types.NewString("Description")).(types.String).String(),
		self.m.Get(types.NewString("DayOfWeek")).(types.String).String(),
		self.m.Get(types.NewString("Date")).(types.String).String(),
		self.m.Get(types.NewString("Time")).(types.String).String(),
		self.m.Get(types.NewString("PdDistrict")).(types.String).String(),
		self.m.Get(types.NewString("Resolution")).(types.String).String(),
		self.m.Get(types.NewString("Address")).(types.String).String(),
		GeopositionFromVal(self.m.Get(types.NewString("Geoposition"))).Def(),
		self.m.Get(types.NewString("PdID")).(types.String).String(),
	}
}

func IncidentFromVal(val types.Value) Incident {
	// TODO: Validate here
	return Incident{val.(types.Map)}
}

func (self Incident) NomsValue() types.Value {
	return self.m
}

func (self Incident) Equals(other Incident) bool {
	return self.m.Equals(other.m)
}

func (self Incident) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Incident) ID() int64 {
	return int64(self.m.Get(types.NewString("ID")).(types.Int64))
}

func (self Incident) SetID(val int64) Incident {
	return Incident{self.m.Set(types.NewString("ID"), types.Int64(val))}
}

func (self Incident) Category() string {
	return self.m.Get(types.NewString("Category")).(types.String).String()
}

func (self Incident) SetCategory(val string) Incident {
	return Incident{self.m.Set(types.NewString("Category"), types.NewString(val))}
}

func (self Incident) Description() string {
	return self.m.Get(types.NewString("Description")).(types.String).String()
}

func (self Incident) SetDescription(val string) Incident {
	return Incident{self.m.Set(types.NewString("Description"), types.NewString(val))}
}

func (self Incident) DayOfWeek() string {
	return self.m.Get(types.NewString("DayOfWeek")).(types.String).String()
}

func (self Incident) SetDayOfWeek(val string) Incident {
	return Incident{self.m.Set(types.NewString("DayOfWeek"), types.NewString(val))}
}

func (self Incident) Date() string {
	return self.m.Get(types.NewString("Date")).(types.String).String()
}

func (self Incident) SetDate(val string) Incident {
	return Incident{self.m.Set(types.NewString("Date"), types.NewString(val))}
}

func (self Incident) Time() string {
	return self.m.Get(types.NewString("Time")).(types.String).String()
}

func (self Incident) SetTime(val string) Incident {
	return Incident{self.m.Set(types.NewString("Time"), types.NewString(val))}
}

func (self Incident) PdDistrict() string {
	return self.m.Get(types.NewString("PdDistrict")).(types.String).String()
}

func (self Incident) SetPdDistrict(val string) Incident {
	return Incident{self.m.Set(types.NewString("PdDistrict"), types.NewString(val))}
}

func (self Incident) Resolution() string {
	return self.m.Get(types.NewString("Resolution")).(types.String).String()
}

func (self Incident) SetResolution(val string) Incident {
	return Incident{self.m.Set(types.NewString("Resolution"), types.NewString(val))}
}

func (self Incident) Address() string {
	return self.m.Get(types.NewString("Address")).(types.String).String()
}

func (self Incident) SetAddress(val string) Incident {
	return Incident{self.m.Set(types.NewString("Address"), types.NewString(val))}
}

func (self Incident) Geoposition() Geoposition {
	return GeopositionFromVal(self.m.Get(types.NewString("Geoposition")))
}

func (self Incident) SetGeoposition(val Geoposition) Incident {
	return Incident{self.m.Set(types.NewString("Geoposition"), val.NomsValue())}
}

func (self Incident) PdID() string {
	return self.m.Get(types.NewString("PdID")).(types.String).String()
}

func (self Incident) SetPdID(val string) Incident {
	return Incident{self.m.Set(types.NewString("PdID"), types.NewString(val))}
}

// Geoposition

type GeopositionDef struct {
	Latitude  float32
	Longitude float32
}

type Geoposition struct {
	m types.Map
}

func NewGeoposition() Geoposition {
	return Geoposition{types.NewMap(
		types.NewString("$name"), types.NewString("Geoposition"),
		types.NewString("Latitude"), types.Float32(0),
		types.NewString("Longitude"), types.Float32(0),
	)}
}

func (def GeopositionDef) New() Geoposition {
	return Geoposition{
		types.NewMap(
			types.NewString("$name"), types.NewString("Geoposition"),
			types.NewString("Latitude"), types.Float32(def.Latitude),
			types.NewString("Longitude"), types.Float32(def.Longitude),
		)}
}

func (self Geoposition) Def() GeopositionDef {
	return GeopositionDef{
		float32(self.m.Get(types.NewString("Latitude")).(types.Float32)),
		float32(self.m.Get(types.NewString("Longitude")).(types.Float32)),
	}
}

func GeopositionFromVal(val types.Value) Geoposition {
	// TODO: Validate here
	return Geoposition{val.(types.Map)}
}

func (self Geoposition) NomsValue() types.Value {
	return self.m
}

func (self Geoposition) Equals(other Geoposition) bool {
	return self.m.Equals(other.m)
}

func (self Geoposition) Ref() ref.Ref {
	return self.m.Ref()
}

func (self Geoposition) Latitude() float32 {
	return float32(self.m.Get(types.NewString("Latitude")).(types.Float32))
}

func (self Geoposition) SetLatitude(val float32) Geoposition {
	return Geoposition{self.m.Set(types.NewString("Latitude"), types.Float32(val))}
}

func (self Geoposition) Longitude() float32 {
	return float32(self.m.Get(types.NewString("Longitude")).(types.Float32))
}

func (self Geoposition) SetLongitude(val float32) Geoposition {
	return Geoposition{self.m.Set(types.NewString("Longitude"), types.Float32(val))}
}
