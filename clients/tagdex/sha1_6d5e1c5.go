// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/chunks"
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mainPackageInFile_sha1_6d5e1c5_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("Geoposition",
			[]types.Field{
				types.Field{"Latitude", types.MakePrimitiveType(types.Float32Kind), false},
				types.Field{"Longitude", types.MakePrimitiveType(types.Float32Kind), false},
			},
			types.Choices{},
		),
		types.MakeStructType("Georectangle",
			[]types.Field{
				types.Field{"TopLeft", types.MakeType(ref.Ref{}, 0), false},
				types.Field{"BottomRight", types.MakeType(ref.Ref{}, 0), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	__mainPackageInFile_sha1_6d5e1c5_CachedRef = types.RegisterPackage(&p)
}

// Geoposition

type Geoposition struct {
	_Latitude  float32
	_Longitude float32

	cs  chunks.ChunkStore
	ref *ref.Ref
}

func NewGeoposition(cs chunks.ChunkStore) Geoposition {
	return Geoposition{
		_Latitude:  float32(0),
		_Longitude: float32(0),

		cs:  cs,
		ref: &ref.Ref{},
	}
}

type GeopositionDef struct {
	Latitude  float32
	Longitude float32
}

func (def GeopositionDef) New(cs chunks.ChunkStore) Geoposition {
	return Geoposition{
		_Latitude:  def.Latitude,
		_Longitude: def.Longitude,
		cs:         cs,
		ref:        &ref.Ref{},
	}
}

func (s Geoposition) Def() (d GeopositionDef) {
	d.Latitude = s._Latitude
	d.Longitude = s._Longitude
	return
}

var __typeForGeoposition types.Type

func (m Geoposition) Type() types.Type {
	return __typeForGeoposition
}

func init() {
	__typeForGeoposition = types.MakeType(__mainPackageInFile_sha1_6d5e1c5_CachedRef, 0)
	types.RegisterStruct(__typeForGeoposition, builderForGeoposition, readerForGeoposition)
}

func builderForGeoposition(cs chunks.ChunkStore, values []types.Value) types.Value {
	i := 0
	s := Geoposition{ref: &ref.Ref{}, cs: cs}
	s._Latitude = float32(values[i].(types.Float32))
	i++
	s._Longitude = float32(values[i].(types.Float32))
	i++
	return s
}

func readerForGeoposition(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Geoposition)
	values = append(values, types.Float32(s._Latitude))
	values = append(values, types.Float32(s._Longitude))
	return values
}

func (s Geoposition) Equals(other types.Value) bool {
	return other != nil && __typeForGeoposition.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Geoposition) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Geoposition) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, __typeForGeoposition.Chunks()...)
	return
}

func (s Geoposition) ChildValues() (ret []types.Value) {
	ret = append(ret, types.Float32(s._Latitude))
	ret = append(ret, types.Float32(s._Longitude))
	return
}

func (s Geoposition) Latitude() float32 {
	return s._Latitude
}

func (s Geoposition) SetLatitude(val float32) Geoposition {
	s._Latitude = val
	s.ref = &ref.Ref{}
	return s
}

func (s Geoposition) Longitude() float32 {
	return s._Longitude
}

func (s Geoposition) SetLongitude(val float32) Geoposition {
	s._Longitude = val
	s.ref = &ref.Ref{}
	return s
}

// Georectangle

type Georectangle struct {
	_TopLeft     Geoposition
	_BottomRight Geoposition

	cs  chunks.ChunkStore
	ref *ref.Ref
}

func NewGeorectangle(cs chunks.ChunkStore) Georectangle {
	return Georectangle{
		_TopLeft:     NewGeoposition(cs),
		_BottomRight: NewGeoposition(cs),

		cs:  cs,
		ref: &ref.Ref{},
	}
}

type GeorectangleDef struct {
	TopLeft     GeopositionDef
	BottomRight GeopositionDef
}

func (def GeorectangleDef) New(cs chunks.ChunkStore) Georectangle {
	return Georectangle{
		_TopLeft:     def.TopLeft.New(cs),
		_BottomRight: def.BottomRight.New(cs),
		cs:           cs,
		ref:          &ref.Ref{},
	}
}

func (s Georectangle) Def() (d GeorectangleDef) {
	d.TopLeft = s._TopLeft.Def()
	d.BottomRight = s._BottomRight.Def()
	return
}

var __typeForGeorectangle types.Type

func (m Georectangle) Type() types.Type {
	return __typeForGeorectangle
}

func init() {
	__typeForGeorectangle = types.MakeType(__mainPackageInFile_sha1_6d5e1c5_CachedRef, 1)
	types.RegisterStruct(__typeForGeorectangle, builderForGeorectangle, readerForGeorectangle)
}

func builderForGeorectangle(cs chunks.ChunkStore, values []types.Value) types.Value {
	i := 0
	s := Georectangle{ref: &ref.Ref{}, cs: cs}
	s._TopLeft = values[i].(Geoposition)
	i++
	s._BottomRight = values[i].(Geoposition)
	i++
	return s
}

func readerForGeorectangle(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Georectangle)
	values = append(values, s._TopLeft)
	values = append(values, s._BottomRight)
	return values
}

func (s Georectangle) Equals(other types.Value) bool {
	return other != nil && __typeForGeorectangle.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Georectangle) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Georectangle) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, __typeForGeorectangle.Chunks()...)
	chunks = append(chunks, s._TopLeft.Chunks()...)
	chunks = append(chunks, s._BottomRight.Chunks()...)
	return
}

func (s Georectangle) ChildValues() (ret []types.Value) {
	ret = append(ret, s._TopLeft)
	ret = append(ret, s._BottomRight)
	return
}

func (s Georectangle) TopLeft() Geoposition {
	return s._TopLeft
}

func (s Georectangle) SetTopLeft(val Geoposition) Georectangle {
	s._TopLeft = val
	s.ref = &ref.Ref{}
	return s
}

func (s Georectangle) BottomRight() Geoposition {
	return s._BottomRight
}

func (s Georectangle) SetBottomRight(val Geoposition) Georectangle {
	s._BottomRight = val
	s.ref = &ref.Ref{}
	return s
}
