// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/clients/gen/sha1_4c734206e6aaef5464ff0e307c2f66751a1469de"
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mainPackageInFile_types_CachedRef = __mainPackageInFile_types_Ref()

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func __mainPackageInFile_types_Ref() ref.Ref {
	p := types.NewPackage([]types.TypeRef{

		types.MakeStructTypeRef("User",
			[]types.Field{
				types.Field{"Id", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Name", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"OAuthToken", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"OAuthSecret", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Albums", types.MakeCompoundTypeRef("", types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeTypeRef(ref.Ref{}, 1)), false},
			},
			types.Choices{},
		),
		types.MakeStructTypeRef("Album",
			[]types.Field{
				types.Field{"Id", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Title", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Photos", types.MakeCompoundTypeRef("", types.SetKind, types.MakeTypeRef(ref.Parse("sha1-4c734206e6aaef5464ff0e307c2f66751a1469de"), 0)), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	return types.RegisterPackage(&p)
}

// User

type User struct {
	m types.Map
}

func NewUser() User {
	return User{types.NewMap(
		types.NewString("$type"), types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0),
		types.NewString("Id"), types.NewString(""),
		types.NewString("Name"), types.NewString(""),
		types.NewString("OAuthToken"), types.NewString(""),
		types.NewString("OAuthSecret"), types.NewString(""),
		types.NewString("Albums"), types.NewMap(),
	)}
}

var __typeRefForUser = types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0)

func (m User) TypeRef() types.TypeRef {
	return __typeRefForUser
}

func init() {
	types.RegisterFromValFunction(__typeRefForUser, func(v types.Value) types.NomsValue {
		return UserFromVal(v)
	})
}

func UserFromVal(val types.Value) User {
	// TODO: Validate here
	return User{val.(types.Map)}
}

func (s User) NomsValue() types.Value {
	return s.m
}

func (s User) Equals(other types.Value) bool {
	if other, ok := other.(User); ok {
		return s.m.Equals(other.m)
	}
	return false
}

func (s User) Ref() ref.Ref {
	return s.m.Ref()
}

func (s User) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.m.Chunks()...)
	return
}

func (s User) Id() string {
	return s.m.Get(types.NewString("Id")).(types.String).String()
}

func (s User) SetId(val string) User {
	return User{s.m.Set(types.NewString("Id"), types.NewString(val))}
}

func (s User) Name() string {
	return s.m.Get(types.NewString("Name")).(types.String).String()
}

func (s User) SetName(val string) User {
	return User{s.m.Set(types.NewString("Name"), types.NewString(val))}
}

func (s User) OAuthToken() string {
	return s.m.Get(types.NewString("OAuthToken")).(types.String).String()
}

func (s User) SetOAuthToken(val string) User {
	return User{s.m.Set(types.NewString("OAuthToken"), types.NewString(val))}
}

func (s User) OAuthSecret() string {
	return s.m.Get(types.NewString("OAuthSecret")).(types.String).String()
}

func (s User) SetOAuthSecret(val string) User {
	return User{s.m.Set(types.NewString("OAuthSecret"), types.NewString(val))}
}

func (s User) Albums() MapOfStringToAlbum {
	return MapOfStringToAlbumFromVal(s.m.Get(types.NewString("Albums")))
}

func (s User) SetAlbums(val MapOfStringToAlbum) User {
	return User{s.m.Set(types.NewString("Albums"), val.NomsValue())}
}

// Album

type Album struct {
	m types.Map
}

func NewAlbum() Album {
	return Album{types.NewMap(
		types.NewString("$type"), types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 1),
		types.NewString("Id"), types.NewString(""),
		types.NewString("Title"), types.NewString(""),
		types.NewString("Photos"), types.NewSet(),
	)}
}

var __typeRefForAlbum = types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 1)

func (m Album) TypeRef() types.TypeRef {
	return __typeRefForAlbum
}

func init() {
	types.RegisterFromValFunction(__typeRefForAlbum, func(v types.Value) types.NomsValue {
		return AlbumFromVal(v)
	})
}

func AlbumFromVal(val types.Value) Album {
	// TODO: Validate here
	return Album{val.(types.Map)}
}

func (s Album) NomsValue() types.Value {
	return s.m
}

func (s Album) Equals(other types.Value) bool {
	if other, ok := other.(Album); ok {
		return s.m.Equals(other.m)
	}
	return false
}

func (s Album) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Album) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.m.Chunks()...)
	return
}

func (s Album) Id() string {
	return s.m.Get(types.NewString("Id")).(types.String).String()
}

func (s Album) SetId(val string) Album {
	return Album{s.m.Set(types.NewString("Id"), types.NewString(val))}
}

func (s Album) Title() string {
	return s.m.Get(types.NewString("Title")).(types.String).String()
}

func (s Album) SetTitle(val string) Album {
	return Album{s.m.Set(types.NewString("Title"), types.NewString(val))}
}

func (s Album) Photos() SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoFromVal(s.m.Get(types.NewString("Photos")))
}

func (s Album) SetPhotos(val SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Album {
	return Album{s.m.Set(types.NewString("Photos"), val.NomsValue())}
}

// MapOfStringToAlbum

type MapOfStringToAlbum struct {
	m types.Map
}

func NewMapOfStringToAlbum() MapOfStringToAlbum {
	return MapOfStringToAlbum{types.NewMap()}
}

func MapOfStringToAlbumFromVal(p types.Value) MapOfStringToAlbum {
	// TODO: Validate here
	return MapOfStringToAlbum{p.(types.Map)}
}

func (m MapOfStringToAlbum) NomsValue() types.Value {
	return m.m
}

func (m MapOfStringToAlbum) Equals(other types.Value) bool {
	if other, ok := other.(MapOfStringToAlbum); ok {
		return m.m.Equals(other.m)
	}
	return false
}

func (m MapOfStringToAlbum) Ref() ref.Ref {
	return m.m.Ref()
}

func (m MapOfStringToAlbum) Chunks() (futures []types.Future) {
	futures = append(futures, m.TypeRef().Chunks()...)
	futures = append(futures, m.m.Chunks()...)
	return
}

// A Noms Value that describes MapOfStringToAlbum.
var __typeRefForMapOfStringToAlbum types.TypeRef

func (m MapOfStringToAlbum) TypeRef() types.TypeRef {
	return __typeRefForMapOfStringToAlbum
}

func init() {
	__typeRefForMapOfStringToAlbum = types.MakeCompoundTypeRef("", types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 1))
	types.RegisterFromValFunction(__typeRefForMapOfStringToAlbum, func(v types.Value) types.NomsValue {
		return MapOfStringToAlbumFromVal(v)
	})
}

func (m MapOfStringToAlbum) Empty() bool {
	return m.m.Empty()
}

func (m MapOfStringToAlbum) Len() uint64 {
	return m.m.Len()
}

func (m MapOfStringToAlbum) Has(p string) bool {
	return m.m.Has(types.NewString(p))
}

func (m MapOfStringToAlbum) Get(p string) Album {
	return AlbumFromVal(m.m.Get(types.NewString(p)))
}

func (m MapOfStringToAlbum) MaybeGet(p string) (Album, bool) {
	v, ok := m.m.MaybeGet(types.NewString(p))
	if !ok {
		return NewAlbum(), false
	}
	return AlbumFromVal(v), ok
}

func (m MapOfStringToAlbum) Set(k string, v Album) MapOfStringToAlbum {
	return MapOfStringToAlbum{m.m.Set(types.NewString(k), v.NomsValue())}
}

// TODO: Implement SetM?

func (m MapOfStringToAlbum) Remove(p string) MapOfStringToAlbum {
	return MapOfStringToAlbum{m.m.Remove(types.NewString(p))}
}

type MapOfStringToAlbumIterCallback func(k string, v Album) (stop bool)

func (m MapOfStringToAlbum) Iter(cb MapOfStringToAlbumIterCallback) {
	m.m.Iter(func(k, v types.Value) bool {
		return cb(k.(types.String).String(), AlbumFromVal(v))
	})
}

type MapOfStringToAlbumIterAllCallback func(k string, v Album)

func (m MapOfStringToAlbum) IterAll(cb MapOfStringToAlbumIterAllCallback) {
	m.m.IterAll(func(k, v types.Value) {
		cb(k.(types.String).String(), AlbumFromVal(v))
	})
}

type MapOfStringToAlbumFilterCallback func(k string, v Album) (keep bool)

func (m MapOfStringToAlbum) Filter(cb MapOfStringToAlbumFilterCallback) MapOfStringToAlbum {
	nm := NewMapOfStringToAlbum()
	m.IterAll(func(k string, v Album) {
		if cb(k, v) {
			nm = nm.Set(k, v)
		}
	})
	return nm
}

// SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto

type SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto struct {
	s types.Set
}

func NewSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto() SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{types.NewSet()}
}

func SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoFromVal(p types.Value) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{p.(types.Set)}
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) NomsValue() types.Value {
	return s.s
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Equals(other types.Value) bool {
	if other, ok := other.(SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto); ok {
		return s.s.Equals(other.s)
	}
	return false
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Ref() ref.Ref {
	return s.s.Ref()
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.s.Chunks()...)
	return
}

// A Noms Value that describes SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto.
var __typeRefForSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto types.TypeRef

func (m SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) TypeRef() types.TypeRef {
	return __typeRefForSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto
}

func init() {
	__typeRefForSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto = types.MakeCompoundTypeRef("", types.SetKind, types.MakeTypeRef(ref.Parse("sha1-4c734206e6aaef5464ff0e307c2f66751a1469de"), 0))
	types.RegisterFromValFunction(__typeRefForSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto, func(v types.Value) types.NomsValue {
		return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoFromVal(v)
	})
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Empty() bool {
	return s.s.Empty()
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Len() uint64 {
	return s.s.Len()
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Has(p sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) bool {
	return s.s.Has(p.NomsValue())
}

type SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoIterCallback func(p sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) (stop bool)

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Iter(cb SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhotoFromVal(v))
	})
}

type SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoIterAllCallback func(p sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto)

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) IterAll(cb SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoIterAllCallback) {
	s.s.IterAll(func(v types.Value) {
		cb(sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhotoFromVal(v))
	})
}

type SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoFilterCallback func(p sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) (keep bool)

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Filter(cb SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhotoFilterCallback) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	ns := NewSetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto()
	s.IterAll(func(v sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) {
		if cb(v) {
			ns = ns.Insert(v)
		}
	})
	return ns
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Insert(p ...sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{s.s.Insert(s.fromElemSlice(p)...)}
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Remove(p ...sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{s.s.Remove(s.fromElemSlice(p)...)}
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Union(others ...SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{s.s.Union(s.fromStructSlice(others)...)}
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Subtract(others ...SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto {
	return SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto{s.s.Subtract(s.fromStructSlice(others)...)}
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) Any() sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto {
	return sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhotoFromVal(s.s.Any())
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) fromStructSlice(p []SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s SetOfsha1_4c734206e6aaef5464ff0e307c2f66751a1469de_RemotePhoto) fromElemSlice(p []sha1_4c734206e6aaef5464ff0e307c2f66751a1469de.RemotePhoto) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}
