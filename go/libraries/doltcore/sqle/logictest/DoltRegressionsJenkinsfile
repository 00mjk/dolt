pipeline {
    agent none
    stages {
        stage('Test Dolt nightly') {
            parallel {
                stage ("Update Liquidata/dolt-sql-performance:nightly") {
                    agent {
                        kubernetes {
                            label "liquidata-inc-ld-build"
                        }
                    }
                    environment {
                        PATH = "${pwd()}/.ci_bin:${pwd()}/.ci_bin/node_modules/.bin:${env.PATH}"
                        DOLT_VERSION = sh(returnStdout: true, script: "(git rev-parse HEAD | tr -d '\n')")
                        TMPDIR = "${pwd()}/tempDir"
                        CREDSDIR = "/home/jenkins/.dolt/creds"
                        DOLT_CREDS = credentials("system-account-dolthub-creds")
                        DOLT_GLOBAL_CONFIG = credentials("system-account-dolthub-config")
                        DOLT_CONFIG_PATH = "/home/jenkins/.dolt"
                    }
                    steps {
                        dir ("sqllogictest") {
                            git url: "https://github.com/liquidata-inc/sqllogictest.git"
                        }
                        dir ("go") {
                            sh "rm -rf $TMPDIR && mkdir $TMPDIR"
                            sh "go get -mod=readonly ./..."
                            sh "go build -mod=readonly -o ../.ci_bin/dolt ./cmd/dolt/."
                        }
                        dir ("go/libraries/doltcore/sqle/logictest/main") {
                            sh "rm -rf $DOLT_CONFIG_PATH && mkdir -p $DOLT_CONFIG_PATH"
                            sh "echo '$DOLT_GLOBAL_CONFIG' > $DOLT_CONFIG_PATH/config_global.json"
                            sh "rm -rf $CREDSDIR && mkdir $CREDSDIR"
                            sh "cat $DOLT_CREDS > /home/jenkins/.dolt/creds/${CREDS_HASH}.jwk"
                            sh "dolt config --global --add user.creds $CREDS_HASH"
                            sh "dolt config --global --add metrics.disabled true"
                            sh "rm -rf temp && mkdir temp"
                            script {
                                def j = env.TEST_N_TIMES.toInteger()
                                for (int i = 1; i <= j; ++i) {
                                    sh "rm -rf .dolt && dolt init"
                                    sh "go run . run ../../../../../../sqllogictest/test/select1.test > temp/results${i}.log"
                                    sh "go run . parse \"$DOLT_VERSION\" temp/results${i}.log > temp/parsed${i}.json"
                                }
                                sh "rm -rf .dolt"
                            }
                        }
                        sh "rm -rf dolt-sql-performance && dolt clone Liquidata/dolt-sql-performance"
                        dir ("dolt-sql-performance") {
                            sh "dolt checkout nightly"
                            script {
                                def j = env.TEST_N_TIMES.toInteger()
                                for (int i = 1; i <= j; ++i) {
                                    sh "dolt table import -u nightly_dolt_results ../go/libraries/doltcore/sqle/logictest/main/temp/parsed${i}.json"
                                    sh "dolt add nightly_dolt_results"
                                    sh "dolt commit -m \"update dolt sql performance results\""
                                }
                            }
                            sh "dolt sql -r csv -q \'select version, test_file, line_num, avg(duration) as mean_duration, result from dolt_history_nightly_dolt_results where version=\"${DOLT_VERSION}\" group by line_num;\' > nightly_mean.csv"
                            sh "dolt table import -u nightly_dolt_mean_results nightly_mean.csv"
                            sh "dolt add nightly_dolt_mean_results"
                            sh "dolt commit -m \"update dolt sql performance mean results\""
                            sh "dolt push origin nightly"
                            sh "dolt checkout regressions"
                            sh "dolt merge nightly"
                            sh "dolt add ."
                            sh "dolt commit -m \"merge nightly\""
                            sh "dolt push origin regressions"
                            sh "dolt checkout releases"
                            sh "dolt sql -r csv -q \'select * from releases_dolt_mean_results;\' > releases_mean.csv"
                            sh "rm -f regressions_db && touch regressions_db"
                            sh "sqlite3 regressions_db < ../go/libraries/doltcore/sqle/logictest/regressions.sql"
                            sh "cp ../go/libraries/doltcore/sqle/logictest/import.sql ."
                            sh "sqlite3 regressions_db < import.sql"
                            script {
                                env.DURATION_REGRESSIONS = sh(returnStdout: true, script: "sqlite3 regressions_db \'select * from releases_nightly_duration_change\' | wc -l | tr -d '[:space:]'")
                                env.RESULT_REGRESSIONS = sh(returnStdout: true, script: "sqlite3 regressions_db \'select * from releases_nightly_result_change\' | wc -l | tr -d '[:space:]'")
                            }
                            sh "if [ $DURATION_REGRESSIONS != 0 ]; then exit 1; fi"
                            sh "if [ $RESULT_REGRESSIONS != 0 ]; then exit 1; fi"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node ("liquidata-inc-ld-build") {
                cleanWs() // cleanup
            }
        }
        failure {
            emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                to: "$SQL_WATCHER_1",
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
            emailext body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
                to: "$SQL_WATCHER_2",
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
        }
    }
}
