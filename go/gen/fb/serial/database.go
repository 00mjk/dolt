// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serial

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Root struct {
	_tab flatbuffers.Table
}

func GetRootAsRoot(buf []byte, offset flatbuffers.UOffsetT) *Root {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Root{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRoot(buf []byte, offset flatbuffers.UOffsetT) *Root {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Root{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Root) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Root) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Root) Datasets(obj *ProllyNode) *ProllyNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ProllyNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RootStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func RootAddDatasets(builder *flatbuffers.Builder, datasets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(datasets), 0)
}
func RootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type DatabaseRoot struct {
	_tab flatbuffers.Table
}

func GetRootAsDatabaseRoot(buf []byte, offset flatbuffers.UOffsetT) *DatabaseRoot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DatabaseRoot{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDatabaseRoot(buf []byte, offset flatbuffers.UOffsetT) *DatabaseRoot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DatabaseRoot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DatabaseRoot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DatabaseRoot) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DatabaseRoot) Tables(obj *ProllyNode) *ProllyNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ProllyNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DatabaseRoot) ForeignKeys(obj *ForeignKey, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DatabaseRoot) ForeignKeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DatabaseRootStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DatabaseRootAddTables(builder *flatbuffers.Builder, tables flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tables), 0)
}
func DatabaseRootAddForeignKeys(builder *flatbuffers.Builder, foreignKeys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(foreignKeys), 0)
}
func DatabaseRootStartForeignKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DatabaseRootEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type Table struct {
	_tab flatbuffers.Table
}

func GetRootAsTable(buf []byte, offset flatbuffers.UOffsetT) *Table {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Table{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTable(buf []byte, offset flatbuffers.UOffsetT) *Table {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Table{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Table) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Table) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Table) Filler() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Table) MutateFiller(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func TableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TableAddFiller(builder *flatbuffers.Builder, filler bool) {
	builder.PrependBoolSlot(0, filler, false)
}
func TableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
