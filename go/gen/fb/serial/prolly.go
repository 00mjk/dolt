// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serial

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeafNode struct {
	_tab flatbuffers.Table
}

func GetRootAsLeafNode(buf []byte, offset flatbuffers.UOffsetT) *LeafNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeafNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLeafNode(buf []byte, offset flatbuffers.UOffsetT) *LeafNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LeafNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LeafNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeafNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LeafNode) Keys(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LeafNode) Values(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LeafNode) Refs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LeafNode) Footer(obj *NodeFooter) *NodeFooter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NodeFooter)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LeafNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LeafNodeAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keys), 0)
}
func LeafNodeAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(values), 0)
}
func LeafNodeAddRefs(builder *flatbuffers.Builder, refs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(refs), 0)
}
func LeafNodeAddFooter(builder *flatbuffers.Builder, footer flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(footer), 0)
}
func LeafNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type InternalNode struct {
	_tab flatbuffers.Table
}

func GetRootAsInternalNode(buf []byte, offset flatbuffers.UOffsetT) *InternalNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &InternalNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsInternalNode(buf []byte, offset flatbuffers.UOffsetT) *InternalNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &InternalNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *InternalNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *InternalNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *InternalNode) Keys(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *InternalNode) Refs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *InternalNode) Footer(obj *NodeFooter) *NodeFooter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NodeFooter)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func InternalNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func InternalNodeAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keys), 0)
}
func InternalNodeAddRefs(builder *flatbuffers.Builder, refs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(refs), 0)
}
func InternalNodeAddFooter(builder *flatbuffers.Builder, footer flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(footer), 0)
}
func InternalNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type NodeFooter struct {
	_tab flatbuffers.Struct
}

func (rcv *NodeFooter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeFooter) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *NodeFooter) NodeCount() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *NodeFooter) MutateNodeCount(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *NodeFooter) TreeCount() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *NodeFooter) MutateTreeCount(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *NodeFooter) TreeLevel() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *NodeFooter) MutateTreeLevel(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func CreateNodeFooter(builder *flatbuffers.Builder, nodeCount uint16, treeCount uint64, treeLevel byte) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.Pad(7)
	builder.PrependByte(treeLevel)
	builder.PrependUint64(treeCount)
	builder.Pad(6)
	builder.PrependUint16(nodeCount)
	return builder.Offset()
}
type TupleArray struct {
	_tab flatbuffers.Table
}

func GetRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TupleArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TupleArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TupleArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TupleArray) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TupleArray) Tuples(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TupleArray) TuplesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateTuples(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TupleArray) Offsets(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *TupleArray) OffsetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateOffsets(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func TupleArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TupleArrayAddTuples(builder *flatbuffers.Builder, tuples flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tuples), 0)
}
func TupleArrayStartTuplesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TupleArrayAddOffsets(builder *flatbuffers.Builder, offsets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(offsets), 0)
}
func TupleArrayStartOffsetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func TupleArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
