// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serial

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type TupleType byte

const (
	TupleTypeUnknown TupleType = 0
	TupleTypeV1      TupleType = 1
)

var EnumNamesTupleType = map[TupleType]string{
	TupleTypeUnknown: "Unknown",
	TupleTypeV1:      "V1",
}

var EnumValuesTupleType = map[string]TupleType{
	"Unknown": TupleTypeUnknown,
	"V1":      TupleTypeV1,
}

func (v TupleType) String() string {
	if s, ok := EnumNamesTupleType[v]; ok {
		return s
	}
	return "TupleType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type KeyArray byte

const (
	KeyArrayNONE       KeyArray = 0
	KeyArrayTupleArray KeyArray = 1
	KeyArrayNameArray  KeyArray = 2
)

var EnumNamesKeyArray = map[KeyArray]string{
	KeyArrayNONE:       "NONE",
	KeyArrayTupleArray: "TupleArray",
	KeyArrayNameArray:  "NameArray",
}

var EnumValuesKeyArray = map[string]KeyArray{
	"NONE":       KeyArrayNONE,
	"TupleArray": KeyArrayTupleArray,
	"NameArray":  KeyArrayNameArray,
}

func (v KeyArray) String() string {
	if s, ok := EnumNamesKeyArray[v]; ok {
		return s
	}
	return "KeyArray(" + strconv.FormatInt(int64(v), 10) + ")"
}

type NodeType byte

const (
	NodeTypeUnknown NodeType = 0
	NodeTypeMap     NodeType = 1
	NodeTypeRefMap  NodeType = 2
	NodeTypeSet     NodeType = 3
)

var EnumNamesNodeType = map[NodeType]string{
	NodeTypeUnknown: "Unknown",
	NodeTypeMap:     "Map",
	NodeTypeRefMap:  "RefMap",
	NodeTypeSet:     "Set",
}

var EnumValuesNodeType = map[string]NodeType{
	"Unknown": NodeTypeUnknown,
	"Map":     NodeTypeMap,
	"RefMap":  NodeTypeRefMap,
	"Set":     NodeTypeSet,
}

func (v NodeType) String() string {
	if s, ok := EnumNamesNodeType[v]; ok {
		return s
	}
	return "NodeType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type TupleArray struct {
	_tab flatbuffers.Table
}

func GetRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TupleArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TupleArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TupleArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TupleArray) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TupleArray) Tuples(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TupleArray) TuplesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateTuples(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TupleArray) Offsets(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *TupleArray) OffsetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateOffsets(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *TupleArray) Format() TupleType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TupleType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TupleArray) MutateFormat(n TupleType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func TupleArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TupleArrayAddTuples(builder *flatbuffers.Builder, tuples flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tuples), 0)
}
func TupleArrayStartTuplesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TupleArrayAddOffsets(builder *flatbuffers.Builder, offsets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(offsets), 0)
}
func TupleArrayStartOffsetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func TupleArrayAddFormat(builder *flatbuffers.Builder, format TupleType) {
	builder.PrependByteSlot(2, byte(format), 0)
}
func TupleArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type NameArray struct {
	_tab flatbuffers.Table
}

func GetRootAsNameArray(buf []byte, offset flatbuffers.UOffsetT) *NameArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NameArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNameArray(buf []byte, offset flatbuffers.UOffsetT) *NameArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NameArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NameArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NameArray) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NameArray) Names(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NameArray) NamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NameArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NameArrayAddNames(builder *flatbuffers.Builder, names flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(names), 0)
}
func NameArrayStartNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NameArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type ProllyNode struct {
	_tab flatbuffers.Table
}

func GetRootAsProllyNode(buf []byte, offset flatbuffers.UOffsetT) *ProllyNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ProllyNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsProllyNode(buf []byte, offset flatbuffers.UOffsetT) *ProllyNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ProllyNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ProllyNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProllyNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ProllyNode) KeysType() KeyArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return KeyArray(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProllyNode) MutateKeysType(n KeyArray) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ProllyNode) Keys(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *ProllyNode) Values(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProllyNode) Refs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ProllyNode) NodeType() NodeType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return NodeType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ProllyNode) MutateNodeType(n NodeType) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *ProllyNode) NodeCount() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProllyNode) MutateNodeCount(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func (rcv *ProllyNode) TreeCount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProllyNode) MutateTreeCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *ProllyNode) TreeLevel() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ProllyNode) MutateTreeLevel(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func ProllyNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ProllyNodeAddKeysType(builder *flatbuffers.Builder, keysType KeyArray) {
	builder.PrependByteSlot(0, byte(keysType), 0)
}
func ProllyNodeAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(keys), 0)
}
func ProllyNodeAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(values), 0)
}
func ProllyNodeAddRefs(builder *flatbuffers.Builder, refs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(refs), 0)
}
func ProllyNodeAddNodeType(builder *flatbuffers.Builder, nodeType NodeType) {
	builder.PrependByteSlot(4, byte(nodeType), 0)
}
func ProllyNodeAddNodeCount(builder *flatbuffers.Builder, nodeCount uint16) {
	builder.PrependUint16Slot(5, nodeCount, 0)
}
func ProllyNodeAddTreeCount(builder *flatbuffers.Builder, treeCount uint64) {
	builder.PrependUint64Slot(6, treeCount, 0)
}
func ProllyNodeAddTreeLevel(builder *flatbuffers.Builder, treeLevel byte) {
	builder.PrependByteSlot(7, treeLevel, 0)
}
func ProllyNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
