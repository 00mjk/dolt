// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serial

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type TupleType byte

const (
	TupleTypeUnknown TupleType = 0
	TupleTypeV1      TupleType = 1
)

var EnumNamesTupleType = map[TupleType]string{
	TupleTypeUnknown: "Unknown",
	TupleTypeV1:      "V1",
}

var EnumValuesTupleType = map[string]TupleType{
	"Unknown": TupleTypeUnknown,
	"V1":      TupleTypeV1,
}

func (v TupleType) String() string {
	if s, ok := EnumNamesTupleType[v]; ok {
		return s
	}
	return "TupleType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type Map struct {
	_tab flatbuffers.Table
}

func GetRootAsMap(buf []byte, offset flatbuffers.UOffsetT) *Map {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Map{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMap(buf []byte, offset flatbuffers.UOffsetT) *Map {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Map{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Map) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Map) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Map) Keys(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Map) Values(obj *TupleArray) *TupleArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TupleArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Map) ChildRefs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Map) HeapRefs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Map) Footer(obj *ProllyFooter) *ProllyFooter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ProllyFooter)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MapStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MapAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keys), 0)
}
func MapAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(values), 0)
}
func MapAddChildRefs(builder *flatbuffers.Builder, childRefs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(childRefs), 0)
}
func MapAddHeapRefs(builder *flatbuffers.Builder, heapRefs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(heapRefs), 0)
}
func MapAddFooter(builder *flatbuffers.Builder, footer flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(footer), 0)
}
func MapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type RefMap struct {
	_tab flatbuffers.Table
}

func GetRootAsRefMap(buf []byte, offset flatbuffers.UOffsetT) *RefMap {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RefMap{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRefMap(buf []byte, offset flatbuffers.UOffsetT) *RefMap {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RefMap{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RefMap) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RefMap) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RefMap) Keys(obj *NameArray) *NameArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NameArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RefMap) ValueRefs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RefMap) ChildRefs(obj *RefArray) *RefArray {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RefArray)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RefMap) Footer(obj *ProllyFooter) *ProllyFooter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ProllyFooter)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RefMapStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RefMapAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(keys), 0)
}
func RefMapAddValueRefs(builder *flatbuffers.Builder, valueRefs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(valueRefs), 0)
}
func RefMapAddChildRefs(builder *flatbuffers.Builder, childRefs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(childRefs), 0)
}
func RefMapAddFooter(builder *flatbuffers.Builder, footer flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(footer), 0)
}
func RefMapEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type TupleArray struct {
	_tab flatbuffers.Table
}

func GetRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TupleArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTupleArray(buf []byte, offset flatbuffers.UOffsetT) *TupleArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TupleArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TupleArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TupleArray) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TupleArray) Tuples(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TupleArray) TuplesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateTuples(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TupleArray) Offsets(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *TupleArray) OffsetsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TupleArray) MutateOffsets(j int, n uint16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *TupleArray) Format() TupleType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TupleType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TupleArray) MutateFormat(n TupleType) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func TupleArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TupleArrayAddTuples(builder *flatbuffers.Builder, tuples flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(tuples), 0)
}
func TupleArrayStartTuplesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TupleArrayAddOffsets(builder *flatbuffers.Builder, offsets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(offsets), 0)
}
func TupleArrayStartOffsetsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func TupleArrayAddFormat(builder *flatbuffers.Builder, format TupleType) {
	builder.PrependByteSlot(2, byte(format), 0)
}
func TupleArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type NameArray struct {
	_tab flatbuffers.Table
}

func GetRootAsNameArray(buf []byte, offset flatbuffers.UOffsetT) *NameArray {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NameArray{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNameArray(buf []byte, offset flatbuffers.UOffsetT) *NameArray {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NameArray{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *NameArray) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NameArray) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NameArray) Names(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NameArray) NamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NameArrayStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func NameArrayAddNames(builder *flatbuffers.Builder, names flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(names), 0)
}
func NameArrayStartNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NameArrayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type ProllyFooter struct {
	_tab flatbuffers.Struct
}

func (rcv *ProllyFooter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ProllyFooter) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ProllyFooter) NodeCount() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *ProllyFooter) MutateNodeCount(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *ProllyFooter) TreeCount() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *ProllyFooter) MutateTreeCount(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *ProllyFooter) TreeLevel() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *ProllyFooter) MutateTreeLevel(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func CreateProllyFooter(builder *flatbuffers.Builder, nodeCount uint16, treeCount uint64, treeLevel byte) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.Pad(7)
	builder.PrependByte(treeLevel)
	builder.PrependUint64(treeCount)
	builder.Pad(6)
	builder.PrependUint16(nodeCount)
	return builder.Offset()
}
