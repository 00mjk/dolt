// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package serial

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Hash struct {
	_tab flatbuffers.Struct
}

func (rcv *Hash) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hash) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Hash) U0() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Hash) MutateU0(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Hash) U1() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *Hash) MutateU1(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *Hash) U2() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *Hash) MutateU2(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *Hash) U3() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *Hash) MutateU3(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func (rcv *Hash) U4() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *Hash) MutateU4(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func CreateHash(builder *flatbuffers.Builder, u0 uint32, u1 uint32, u2 uint32, u3 uint32, u4 uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 20)
	builder.PrependUint32(u4)
	builder.PrependUint32(u3)
	builder.PrependUint32(u2)
	builder.PrependUint32(u1)
	builder.PrependUint32(u0)
	return builder.Offset()
}
type Ref struct {
	_tab flatbuffers.Struct
}

func (rcv *Ref) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Ref) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Ref) Hash(obj *Hash) *Hash {
	if obj == nil {
		obj = new(Hash)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}

func CreateRef(builder *flatbuffers.Builder, hash_u0 uint32, hash_u1 uint32, hash_u2 uint32, hash_u3 uint32, hash_u4 uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 20)
	builder.Prep(4, 20)
	builder.PrependUint32(hash_u4)
	builder.PrependUint32(hash_u3)
	builder.PrependUint32(hash_u2)
	builder.PrependUint32(hash_u1)
	builder.PrependUint32(hash_u0)
	return builder.Offset()
}
