// Copyright 2021 Dolthub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "common.fbs";

namespace serial;

table Map {
  // map keys ordered lexigraphically
  keys:TupleArray (required);

  // map values ordered by corresponding key
  // only present in leaf nodes
  values:TupleArray;

  // pointers to prolly tree children
  // only present in internal nodes
  child_refs:RefArray;

  // pointers to ref'd values (eg TEXT)
  // only present in leaf nodes
  heap_refs:RefArray;

  footer:ProllyFooter (required);
}

table RefMap {
  // map keys ordered lexigraphically
  keys:NameArray (required);

  // map values ordered by corresponding key
  // only present in leaf nodes
  value_refs:RefArray;

  // pointers to prolly tree children
  // only present in internal nodes
  child_refs:RefArray;

  footer:ProllyFooter (required);
}


enum TupleType : uint8 {
  Unknown,
  V1 = 1,
}

table TupleArray {
  tuples:[byte] (required);
  offsets:[uint16] (required);
  format:TupleType;
}

table NameArray {
    names:[string] (required);
}

struct ProllyFooter {
  // node key count
  node_count:uint16;

  // subtree key count
  tree_count:uint64;

  // node tree level, 0 for leaf nodes
  tree_level:uint8;
}
