// serialization format prototype using flatbuffers

include "common.fbs";

namespace serial;

enum TupleType : uint8 {
  Unknown,
  V1 = 1,
}

table TupleArray {
  tuples:[byte] (required);
  offsets:[uint16] (required);
  format:TupleType;
}

table NameArray {
    names:[string] (required);
}

union KeyArray {
  TupleArray,
  NameArray
}

enum NodeType : uint8 {
  Unknown,
  Map = 1,
  RefMap = 2,
  Set = 3

  // todo(andy): commit parent closure?
}

table ProllyNode {
  // keys
  //  - TupleArray for Map nodes
  //  - TupleArray for Set nodes
  //  - NameArray for RefMap nodes
  keys:KeyArray (required);

  // values
  //  - TupleArray for Map leaf nodes
  //  - absent for Map interal nodes
  //  - absent for RefMap, Set nodes
  values:TupleArray;

  // refs
  //  - subtree Refs for all internal nodes
  //  - heap Refs for Map leaf nodes containing
  //    TEXT or BLOB values
  refs:RefArray;

  // node type
  node_type:NodeType;

  // node key count
  node_count:uint16;

  // subtree key count
  tree_count:uint64;

  // node tree level, 0 for leaf nodes
  tree_level:uint8;
}